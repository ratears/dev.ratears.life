[{"title":"JAVA-ACE-架构师系列视频课程-RocketMQ（上）","url":"/dev.ratears.life/2023/JAVA-ACE-%E6%9E%B6%E6%9E%84%E5%B8%88%E7%B3%BB%E5%88%97%E8%A7%86%E9%A2%91%E8%AF%BE%E7%A8%8B-RocketMQ%EF%BC%88%E4%B8%8A%EF%BC%89/","content":"\n\nRocketMQ简介简介\nRocketMQ是一款分布式、队列模型的消息中间件，由阿里巴巴研发，借鉴参考了JMS规范的MQ实现，更参考了优秀的开源消息中间件Kafka，并且结合阿里实际业务需求，在天猫双十一的场景，实现业务消峰、分布式事务的优秀框架。\nrocketmq github\n其底层代码编写清晰优秀，采用NettyNIO框架进行数据通信。\n3.X版本摒弃了Zookeeper，内部使用更轻量级的NameServer进行网络路由，提高服务性能，并且支持消息失败重试机制。\n天然支持集群模型，消费者负载均衡、水平扩展能力，支持广播模式。\n采用零拷贝的原理、顺序写盘、支持亿级消息堆积能力。\n提供丰富的消息机制，如顺序消息、事务消息等(开源版本目前并未支持)。\n\n\n\n\n\n特点 &amp; 优势\n能够保证严格的消息顺序\n提供丰富的消息拉取模式\n高效的订阅者水平扩展能力\n实时的消息订阅机制\n亿级消息堆积能力\nMetaq2.x版本之后:改名为RocketMQ\nRocket4.x ( 分布式事务。事务消息 )\n\n\n\n\n\n选择理由\n强调集群无单点，可扩展，任意一点高可用，水平可扩展\n海量消息堆积能力，消息堆积后，写入低延迟。\n支持上万个队列\n消息失败重试机制\n消息可查询\n开源社区活跃\n成熟度(经过双十一考验)\n\n\n\n\n\n核心概念&#x2F;专业术语\nProducer：消息生产者，负责产生消息，一般由业务系统负责产生消息。\nConsumer：消息消费者，负责消费消息，一般是后台系统负责异步消费。\nPush Consumer：Consumer 的一种，应用通常吐 Consumer 对象注册一个 Listener 接口，一旦收到消息，Consumer 对象立刻回调 Listener 接口方法。\nPull Consumer：Consumer 的一种，应用通常主劢调用 Consumer 的拉消息方法从 Broker 拉消息，主劢权由应用控制。\nProducer Group：一类 Producer 的集合名称，返类 Producer 通常収送一类消息，丏収送逡辑一致。\nConsumer Group：一类 Consumer 的集合名称，返类 Consumer 通常消费一类消息，且消费逻辑一致。\nBroker：消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。\n广播消费：\n一条消息被多个 Consumer 消费，即使这些 Consumer 属于同一个 Consumer Group，消息也会被 Consumer Group 中的每个 Consumer 都消费一次，广播消费中的 Consumer Group 概念可以认为在消息划分方面无意义。\n在 CORBA Notification 规范中，消费方式都属亍广播消费。\n在 JMS 规范中，相当亍 JMS publish&#x2F;subscribe model\n\n\n集群消费：\n一个 Consumer Group 中的 Consumer 实例平均分摊消费消息。例如某个 Topic 有 9 条消息，其中一个Consumer Group 有 3 个实例（可能是 3 个迕程，戒者 3 台机器），那举每个实例只消费其中的 3 条消息。\n在 CORBA Notification 规范中，无此消费方式。\n\n\n顺序消息：\n消费消息的顺序要同发送消息的顺序一致，在 RocketMQ 中，主要指的是局部顺序，即一类消息为满足顺序性，必须 Producer 单线程顺序发送，且发送到同一个队列，这样 Consumer 就可以按照 Producer 发送的顺序去消费消息\n\n\n普通顺序消息：\n顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由队列总数发生变化，哈希取模后定位的队列会变化，产生短暂的消息顺序不一致。\n如果业务能容忍在集群异常情况（如某个 Broker 宕机或者重启）下，消息短暂的乱序，使用普通顺序方式比较合适。\n\n\n严格顺序消息：\n顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover 特性，即 Broker 集群中只要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。\n如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。（依赖同步双写，主备自动切换，自动切换功能目前还未实现）\n目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推荐使用普通的顺序消息。\n\n\nMessage Queue：\n在 RocketMQ 中，所有消息队列都是持久化，长度无限的数据结构，所谓长度无限是指队列中的每个存储单元都是定长，访问其中的存储单元使用 Offset 来访问，offset 为 java long 类型，64 位，理论上在 100年内不会溢出，所以认为是长度无限，另外队列中只保存最近几天的数据，之前的数据会按照过期时间来删除。\n也可以认为 Message Queue 是一个长度无限的数组，offset 就是下标。\n\n\n\n\n\n\n\nRocketMQ OverviewRocketMQ 是什么？\n是一个队列模型的消息中间件，具有高性能、高可靠、高实时、分布式特点。\nProducer、Consumer、队列都可以分布式。\nProducer 吐一些队列轮流収送消息，队列集合称为 Topic，Consumer 如果做广播消费，则一个 consumer实例消费返个 Topic 对应的所有队列，如果做集群消费，则多个 Consumer 实例平均消费返个 topic 对应的队列集合。\n能够保证严格的消息顺序\n提供丰富的消息拉取模式\n高效的订阅者水平扩展能力\n实时的消息订阅机制\n亿级消息堆积能力\n较少的依赖\n\n\n\nRocketMQ 物理部署结构\nRocketMQ 网络部署图\n\n\n\n\nName Server 是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。\nBroker 部署相对复杂，Broker 分为 Master 与 Slave，一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个Master，Master与 Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定指定，BrokerId为 0 表示 Master，非 0 表示 Slave。Master 也可以部署多个。每个 Broker 与 Name Server 集群中的所有节点建立长连接，定时注册 Topic 信息到所有 Name Server。\nProducer 与 Name Server 集群中的其中一个节点（随机选择）建立长连接，定期从 Name Server 取 Topic 路 由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master 发送心跳。Producer 完全无状态，可 集群部署。\nConsumer 与Name Server 集群中的其中一个节点（随机选择）建立长连接，定期从 Name Server 取 Topic 路 由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳。Consumer 既可以从 Master 订阅消息，也可以从 Slave 订阅消息，订阅规则由 Broker 配置决定。\n\n\n\nRocketMQ 逻辑部署结构\nRocketMQ 逻辑部署结构图\n\n\n\n\nProducer Group\n用来表示一个发送消息应用，一个 Producer Group 下包含多个 Producer 实例，可以是多台机器，也可以 是一台机器的多个进程，或者一个进程的多个 Producer 对象。一个 Producer Group 可以发送多个 Topic 消息，Producer Group 作用如下：\n标识一类 Producer \n可以通过运维工具查询返个収送消息应用下有多个 Producer 实例 \n収送分布式事务消息时，如果 Producer 中途意外宕机，Broker 会主劢回调 Producer Group 内的任意 一台机器来确认事务状态。\n\n\n\n\nConsumer Group \n用来表示一个消费消息应用，一个 Consumer Group 下包含多个 Consumer 实例，可以是多台机器，也可 以是多个迕程，或者是一个进程的多个 Consumer 对象。一个 Consumer Group 下的多个 Consumer 以均摊 方式消费消息，如果设置为广播方式，那么这个 Consumer Group 下的每个实例都消费全量数据。\n\n\n\n\n\n\n\n\n\n集群环境集群环境介绍\nRocketMO就是为了分布式而产生的，当然天然支持集群\nRocketMO的集群模型：\n单机模式(M)\nMaster-Slave模式(M-S)\n双Master模式 ( 2M)\n双主双从模式(2M-2S)\n多主多从模式(NM-NS)\n\n\n\n\n\n\n\nRocketMQ 部署【双Master 方式】服务器环境\n\n\n序号\nIP\n用户名\n角色\n模式\n\n\n\n1\n192.168.61.221\nroot\nnameServer1,brokerServer1\nMaster1\n\n\n2\n192.168.61.222\nroot\nnameServer2,brokerServer2\nMaster2\n\n\n\n\nHosts 添加信息【两台机器】\n注意：两台机器需要在9876端口互通，需要开通相关网络策略\n\nvim /etc/hosts\n\n192.168.61.221  rocketmq-nameserver1192.168.61.221  rocketmq-master1192.168.61.222  rocketmq-nameserver2192.168.61.222  rocketmq-master2\n\n\n\n上传解压【两台机器】#  上传 alibaba-rocketmq-3.2.6.tar.gz 文件至/usr/local/src/cd /usr/local/src/tar -zxvf alibaba-rocketmq-3.2.6.tar.gz -C /usr/local/cd /usr/local/mv alibaba-rocketmq alibaba-rocketmq-3.2.6ln -s alibaba-rocketmq-3.2.6 rocketmq\n\n\n\n创建存储路径【两台机器】mkdir /usr/local/rocketmq/storemkdir /usr/local/rocketmq/store/commitlogmkdir /usr/local/rocketmq/store/consumequeuemkdir /usr/local/rocketmq/store/index\n\n\n\n修改RocketMQ  配置文件【两台机器】vim /usr/local/rocketmq/conf/2m-noslave/broker-a.properties\n\nbrokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-a#0 表示 Master，&gt;0 表示 SlavebrokerId=0#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128\n\nvim /usr/local/rocketmq/conf/2m-noslave/broker-b.properties\n\nbrokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-b#0 表示 Master，&gt;0 表示 SlavebrokerId=0#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128\n\n\n\n\n\n修改日志配置文件【两台机器】mkdir -p /usr/local/rocketmq/logscd /usr/local/rocketmq/conf &amp;&amp; sed -i &#x27;s#$&#123;user.home&#125;#/usr/local/rocketmq#g&#x27; *.xml\n\n\n\n修改启动脚本参数【两台机器】vim /usr/local/rocketmq/bin/runbroker.sh\n\n#==============================================================================# 开发环境 JVM Configuration#==============================================================================JAVA_OPT=&quot;$&#123;JAVA_OPT&#125;  -server  -Xms1g  -Xmx1g  -Xmn512m  -XX:PermSize=128m  -XX:MaxPermSize=320m&quot;\n\nvim /usr/local/rocketmq/bin/runserver.sh\n\nJAVA_OPT=&quot;$&#123;JAVA_OPT&#125;  -server  -Xms1g  -Xmx1g  -Xmn512m  -XX:PermSize=128m  -XX:MaxPermSize=320m&quot;\n\n\n\n启动 NameServer 【两台机器】cd /usr/local/rocketmq/binnohup sh mqnamesrv &amp;jsp\n\n\n\n启动 BrokerServerA 【192.168.61.221】cd /usr/local/rocketmq/binnohup sh mqbroker -c /usr/local/rocketmq/conf/2m-noslave/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;netstat -ntlpjpstail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.logtail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log\n\n\n\n启动 BrokerServer2 【192.168.61.222】cd /usr/local/rocketmq/binnohup sh mqbroker -c /usr/local/rocketmq/conf/2m-noslave/broker-b.properties &gt;/dev/null 2&gt;&amp;1 &amp;netstat -ntlpjpstail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.logtail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log\n\n\n\n\n\nRocketMQ 监控台\n我们使用RocketMQ自带的web项目监控集群消费信息。rocketmg-console-3.26war把这个部署到tomcat上即可\n\ncd /usr/local/src/# 上传 apache-tomcat-8.5.93.tar.gz 到 /usr/local/src/ 目录下tar -zxvf  apache-tomcat-8.5.93.tar.gz -C /usr/local/# 上传 rocketmq-console.war 到 /usr/local/apache-tomcat-8.5.93/webapps/ 目录下cd /usr/local/apache-tomcat-8.5.93/webapps/unzip rocketmq-console.war -d rocketmq-consolerm -rf rocketmq-console.war\n\nvim /usr/local/apache-tomcat-8.5.93/webapps/rocketmq-console/WEB-INF/classes/config.properties\n\nrocketmq.namesrv.addr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876throwDone=true\n\n/usr/local/apache-tomcat-8.5.93/bin/startup.sh\n\n\nhttp://192.168.61.222:8080/rocketmq-console\n\n\n\n\n\n\n\nBroker配置文件详解brokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-a#0 表示 Master，&gt;0 表示 SlavebrokerId=0#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128\n\n\n\n\n\n\n\nRocketMQ Java API helloword/** * Copyright (C) 2010-2013 Alibaba Group Holding Limited * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.alibaba.rocketmq.example.simple;import com.alibaba.rocketmq.client.exception.MQClientException;import com.alibaba.rocketmq.client.producer.DefaultMQProducer;import com.alibaba.rocketmq.client.producer.SendResult;import com.alibaba.rocketmq.common.message.Message;public class Producer &#123;    public static void main(String[] args) throws MQClientException, InterruptedException &#123;        /**         * 一个应用创建一个Producer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;         * 注意：ProducerGroupName需要由应用来保证唯一&lt;br&gt;         * ProducerGroup这个概念发送普通的消息时，作用不大，但是发送分布式事务消息时，比较关键，         * 因为服务器会回查这个Group下的任意一个Producer         */        DefaultMQProducer producer = new DefaultMQProducer(&quot;ProducerGroupName&quot;);        /**         * Producer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;         * 注意：切记不可以在每次发送消息时，都调用start方法         */        producer.start();        /**         * 下面这段代码表明一个Producer对象可以发送多个topic，多个tag的消息。         * 注意：send方法是同步调用，只要不抛异常就标识成功。但是发送成功也可会有多种状态，&lt;br&gt;         * 例如消息写入Master成功，但是Slave不成功，这种情况消息属于成功，但是对于个别应用如果对消息可靠性要求极高，&lt;br&gt;         * 需要对这种情况做处理。另外，消息可能会存在发送失败的情况，失败重试由应用来处理。         */        for (int i = 0; i &lt; 1; i++)            try &#123;                &#123;                    Message msg = new Message(&quot;TopicTest1&quot;,// topic                        &quot;TagA&quot;,// tag                        &quot;OrderID188&quot;,// key                        (&quot;Hello MetaQ&quot;).getBytes());// body                    SendResult sendResult = producer.send(msg);                    System.out.println(sendResult);                &#125;            &#125;            catch (Exception e) &#123;                e.printStackTrace();            &#125;        /**         * 应用退出时，要调用shutdown来清理资源，关闭网络连接，从MetaQ服务器上注销自己         * 注意：我们建议应用在JBOSS、Tomcat等容器的退出钩子里调用shutdown方法         */        producer.shutdown();    &#125;&#125;\n\n/** * Copyright (C) 2010-2013 Alibaba Group Holding Limited * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.alibaba.rocketmq.example.simple;import java.util.List;import com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;import com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;import com.alibaba.rocketmq.client.exception.MQClientException;import com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;import com.alibaba.rocketmq.common.message.MessageExt;public class PushConsumer &#123;    /**     * 当前例子是PushConsumer用法，使用方式给用户感觉是消息从RocketMQ服务器推到了应用客户端。&lt;br&gt;     * 但是实际PushConsumer内部是使用长轮询Pull方式从Broker拉消息，然后再回调用户Listener方法&lt;br&gt;     */    public static void main(String[] args) throws InterruptedException, MQClientException &#123;        /**         * 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;         * 注意：ConsumerGroupName需要由应用来保证唯一         */        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;CID_001&quot;);        /**         * 订阅指定topic下tags分别等于TagA或TagC或TagD         */        consumer.subscribe(&quot;TopicTest1&quot;, &quot;TagA || TagC || TagD&quot;);        /**         * 订阅指定topic下所有消息&lt;br&gt;         * 注意：一个consumer对象可以订阅多个topic         */        consumer.subscribe(&quot;TopicTest2&quot;, &quot;*&quot;);        consumer.subscribe(&quot;TopicTest3&quot;, &quot;*&quot;);        /**         * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;         * 如果非第一次启动，那么按照上次消费的位置继续消费         */        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);        consumer.registerMessageListener(new MessageListenerConcurrently() &#123;            /**             * 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息             */            @Override            public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs,                    ConsumeConcurrentlyContext context) &#123;                System.out.println(Thread.currentThread().getName() + &quot; Receive New Messages: &quot; + msgs);                MessageExt msg = msgs.get(0);                if (msg.getTopic().equals(&quot;TopicTest1&quot;)) &#123;                    // 执行TopicTest1的消费逻辑                    if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;TagA&quot;)) &#123;                        // 执行TagA的消费                    &#125; else if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;TagC&quot;)) &#123;                        // 执行TagC的消费                    &#125; else if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;TagD&quot;)) &#123;                        // 执行TagD的消费                    &#125;                &#125; else if (msg.getTopic().equals(&quot;TopicTest2&quot;)) &#123;                    // 执行TopicTest2的消费逻辑                &#125;                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;            &#125;        &#125;);        /**         * Consumer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;         */        consumer.start();        System.out.println(&quot;Consumer Started.&quot;);    &#125;&#125;\n\n","categories":["MQ","RocketMQ"],"tags":["MQ","RocketMQ"]},{"title":"JAVA-ACE-架构师系列视频课程-RocketMQ（下）","url":"/dev.ratears.life/2023/JAVA-ACE-%E6%9E%B6%E6%9E%84%E5%B8%88%E7%B3%BB%E5%88%97%E8%A7%86%E9%A2%91%E8%AF%BE%E7%A8%8B-RocketMQ%EF%BC%88%E4%B8%8B%EF%BC%89/","content":"\n\nRocketMQ实战项目介绍与设计RocketMQ适合的应用场景介绍\n服务解耦\n异步处理\n并行处理\n最终一致\n\n\n\n\n\n为什么用RocketMQ ?\n面向分布式系统的MQ\n无单点的分布式集群化\n数据安全\n海量数据堆积\n毫秒级投递延迟\n\n\n\n\n\n实战项目介绍\n我们模拟一个真实项目案例，进行对RocketMQ的学习，假设我们有N多个订阅关系也就是说我们可能存在多个Topic主题，或者简单说我们的MQ服务器需要支持多个系统的消息收发。\n\n\n模拟电商交易系统的几个流程：\n\n创建订单-&gt;减库存，库存-&gt;订单\n支付成功-&gt;订单、积分、优惠券、物流等等\n\n\n实战项目：模拟一个电商网站的交易系统\n\n任务分析：\n\n需求分析：在我们所熟悉的网上购物平台中，实现交易的几个主要操作动作\n挑商品(搜索)\n创建订单\n选择收货地址\n选择支付方式\n选择优惠券\n提交订单\n\n\n订单付款\n\n\n流程设计\n模块划分\n数据库设计\n业务问题\n\n\n\n\n\n\n\n项目设计\n提交订单请求，后台需要做哪些典型的事情?\n\n提交订单——&gt;校验——&gt;使用优惠劵——&gt;扣库存——&gt;创建交易单\n\n\n\n\n\n支付流程\n\n\n\n\n\n\n\n消息可靠投递\n一段伪代码（存在问题）\n\npublic void doBusiness()&#123;        try &#123;            boolean result = service.doSave(model);//1、如操作数据库失败，抛出异常            if (result) &#123;                sendMessage(model); //2、如果数据库操作成功，发送消息，如消息发送失败，抛出异常            &#125;        &#125;catch (Exception e) &#123;            rollback(); //3、如果发生异常，回滚数据库        &#125;&#125;\n\n\n\n\n在1.5 ~ 1.8 步 出现问题的时候，事务无法提交或回滚\n\n\n可靠设计如下：即使MQ发送消息 ~ 返回消息的过程中出现了问题，业务依然正常运行\n\n\n\n\n\n\n\n交易系统模块划分\n\n\n\n\n\n\n\n环境搭建\n略\n\n\n\n\n\n\n\nRocketMQ与Spring结合\n\n\n\n\n\n数据库模型设计","categories":["MQ","RocketMQ"],"tags":["MQ","RocketMQ"]},{"title":"《Java设计模式精讲 Debug方式+内存分析》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8AJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B2%BE%E8%AE%B2-Debug%E6%96%B9%E5%BC%8F-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程导学设计模式概述\n工程师必备知识\n面试高频考点\n\n\n\n\n\n课程内容设计\n设计模式定义\n\n设计模式应用\n\n源码解析\n\n系统学习设计模式\n\n结合大量场景 Coding\n\n动态递进式讲解(场景-UML-代码）\n\n采用 Debug方式及内存分析，容易理解抽象的设计模式\n\nJDK及热门开源框架解析，领略设计模式的妙用技巧\n\n\n\n真正学懂设计模式，面试中脱颖而出\n\n\n\n\n\n\n\n第2章 UML急速入门\nUML基础\nUML类图\nUML时序留\nUML类关系\nUML记忆技巧\n\n\n\n\n\n\n\n第3章 软件设计七大原则开闭原则\n开闭原则\n依赖倒置原则\n单一职责原则\n接口隔离原则\n迪米特原则\n里氏替换原则\n合成复用原则\n\n\n\n\n\n\n\n设计模式-创建型模式\n工厂方法模式\n抽象工厂模式\n建造者模式\n单例模式\n原型模式\n\n\n\n\n\n\n\n设计模式-结构型模式\n适配器模式\n装饰者模式\n代理模式\n外观模式\n桥接模式\n组合模式\n享元模式\n\n\n\n\n\n\n\n设计模式-行为型模式\n策略模式\n观察者模式\n责任链模式\n备忘录模式\n模板方法模式\n迭代器模式\n中介者模式\n命令模式\n访问者模式\n解释器模式\n状态模式\n\n","categories":["Design-Pattern"],"tags":["Design-Pattern"]},{"title":"《Go开发工程师》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8AGo%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%8BStudy-Notes/","content":"\n\n\n\n\n\n\n\n\n\nReferences\nGo开发工程师全新版\n\n","categories":["Go"],"tags":["G"]},{"title":"《Java主流分布式解决方案多场景设计与实战》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8AJava%E4%B8%BB%E6%B5%81%E5%88%86%E5%B8%83%E5%BC%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%A4%9A%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程介绍分布式架构下常见问题\n集群部署，JVM锁解决不了并发问题\n远程调用，Spring事务失效了\n数据量太大，单库单表支撑不了业务压力了\n分库分表，数据库自增id重复了\n已经登录过了，访问另外一个服务还需要重新登录\n集群部署，Spring任务调度执行重复了\n\n\n\n\n\n课程安排\n分布式锁\n分布式事务\n分布式ID\n分库分表\n分布式会话\n分布式调度\n\n\n\n\n\n\n\n第2章 分布式锁前置内容-JVM锁和MySql锁解决库存超卖问题扣减库存实战\n需求背景：电商项目中，用户购买商品后，会对商品的库存进行扣减\n需求实现：根据用户购买商品及购买商品数量，对商品的库存进行指定数量的扣减。\n\ncreate database shop;\n\nDROP TABLE IF EXISTS `goods_stock`;CREATE TABLE `goods_stock` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `goods_id` bigint(20) NOT NULL,  `stock` int(11) NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;商品库存表&#x27;;\n\n\n\n\n库存扣减项目技术点\nSpring Boot 3.0\nJDK17\nMybatis\nLombok\n\n\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;3.0.6&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.stu&lt;/groupId&gt;    &lt;artifactId&gt;distributed-lock-stock&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;distributed-lock-stock&lt;/name&gt;    &lt;description&gt;distributed-lock-stock&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;17&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;3.0.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter-test&lt;/artifactId&gt;            &lt;version&gt;3.0.2&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                &lt;configuration&gt;                    &lt;excludes&gt;                        &lt;exclude&gt;                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;                        &lt;/exclude&gt;                    &lt;/excludes&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;\n\nserver:  port: 8080spring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    username: root    password: root    url: jdbc:mysql://localhost:3306/shop?characterEncoding=UTF-8\n\n\n\n\n\n\n\n\n\n使用JMeter压力测试工具\nJmeter介绍\nApacheJMeter 是 Apache 组织基于Java 开发的压力测试工具，用于对软件做压力测试。\n\n\nJmeter用来做什么\n接口测试\n性能测试\n压力测试\n\n\n\n","categories":["distributed"],"tags":["distributed","lock"]},{"title":"Software Development Learning Routes And Resources","url":"/dev.ratears.life/2023/Software-Development-Learning-Routes-And-Resources/","content":"\n\nRoute\nRocketMQ MQ\nJVM Java\nMySQL\nother：git maven linux mongodb\n\nJavaJVM\n\n\nexplain\ncontent\n\n\n\n学习目标\n熟悉JVM内存结构，垃圾回收算法等核心知识熟悉JVM调优实践应对高阶JVM面试题（包括笔试题、面试概述题、以及JVM实践和调优）\n\n\n入门\n尚硅谷宋红康JVM全套教程（详解java虚拟机）深入拆解 Java 虚拟机从 0 开始带你成为JVM高手深入浅出 Java 虚拟机_LG\n\n\n系统全面&#x2F;进阶\n《深入理解Java虚拟机（第3版）》构建JVM知识体系 解决Java工程师必会的工作&#x2F;面试难点JVM与GC调优_大厂学苑深入JVM内核—原理、诊断与优化\n\n\n进阶&#x2F;面试\nJVM七大核心系统精讲 从基础理论到高级应用\n\n\n待定\n马士兵jvm、龙果学院 叶子猿 深入理解Java虚拟机、深入理解和实践JVM、反射和内省技术_腾讯课堂、一次性精通JVM JAVA虚拟机\n\n\n\n\n\n\n\n\nDataBaseMySQL（软件开发&#x2F;使用方向）\n\n\nexplain\ncontent\nremark\n\n\n\n学习目标\n精通MySQL，成为数据库架构师\n\n\n\n入门\n零基础入门 详解企业主流数据库MySQL8.0MySQL、Redis、MongoDB 数据库一课通【没有资源】《MySQL是怎样使用的 快速入门MySQL》MySQL 必知必会（geek）《MySQL必知必会》\n\n\n\n实战\n阿里新零售数据库设计与实战 （升级版）高并发 高性能 高可用 MySQL 实战\n\n\n\n系统全面\n6大数据库，挖掘7种Java业务下的分布式存储更优解《MySQL是怎样运行的 : 从根儿上理解 MySQL》\n\n\n\n进阶\nMySQL提升课程 全面讲解MySQL架构设计技术大牛成长课,从0到1带你手写一个数据库系统MySQL面试指南 中高级开发者的晋升加薪利器MySQL 实战 45 讲《高性能MySQL（第4版）》\n\n\n\n\n路线：先掌握最基础的mysql知识，然后学习mysql的架构设计，内部设计，然后学习实战课程\n学习资料：\nMySQL 必知必会（geek）、零基础入门 详解企业主流数据库MySQL8.0\nMySQL提升课程 全面讲解MySQL架构设计\n高并发 高性能 高可用 MySQL 实战\n再来一个其它非主流平台的mysql课程：MySQL精讲训练营、7天实战集训营-带你锤碎MySQL\n\n\n\n\n\n\n\nMySQL（运维&#x2F;架构&#x2F;DBA方向）\n\n\nexplain\ncontent\n\n\n\n学习目标\n\n\n\n入门\n\n\n\n系统全面\nDBA数据库工程师（imooc）【没有资源】\n\n\n进阶\n\n\n\n\n\n\n\nMongoDB\n\n\nexplain\ncontent\n\n\n\n学习目标\n熟练、实践。技能可以写在简历上\n\n\n入门\n【编程不良人】MongoDB最新实战教程\n\n\n系统全面\n玩转MongoDB4.0(最新版) 从入门到实践\n\n\n进阶\nMongoDB 高手课\n\n\n\n\n\n\n\n\nServerTomcat\n\n\nexplain\ncontent\n\n\n\n学习目标\n熟悉原理，能够写到简历中\n\n\n入门\n黑马程序员Java进阶教程Tomcat核心原理解析\n\n\n系统全面\n《深入剖析Tomcat》、《Tomcat架构解析》……\n\n\n进阶\nTomcat深度剖析及性能调优（重点：手写迷你Tomcat）\n\n\n\n\n\n\nNginx\n\n\n\n\n\nMQMQ\n\n\nexplain\ncontent\n\n\n\n学习目标\n\n\n\n入门\n从零开始带你成为消息中间件实战高手深入拆解消息队列 47 讲消息队列高手课\n\n\n系统全面\n深入拆解消息队列 47 讲消息队列高手课\n\n\n进阶\n\n\n\n\n\n\n\nRocketMQ\n\n\nexplain\ncontent\n\n\n\n学习目标\n\n\n\n入门\nJAVA-ACE-架构师系列视频课程- RocketMQ（上）（下）RocketMQ核心技术精讲与高并发抗压实战\n\n\n系统全面\nRocketMQ官方文档\n\n\n进阶\n\n\n\n待定\n价值198元新版本RocketMQ4.X教程消息队列\n\n\n\n\n\n\n\n\nDevelopment ToolsGit\n\n\nexplain\ncontent\n\n\n\n学习目标\n熟悉常用操作，了解基本原理，了解常见问题解决方式熟悉作为技术领导需要掌握的Git团队协作技能\n\n\n入门\n玩转 Git 三剑客\n\n\n系统全面\nGit 官方文档\n\n\n进阶\n《Git权威指南》\n\n\n\n\n\n\n\n\nGitHub\n\n\n\n\n\ntemplate\n\n\nexplain\ncontent\n\n\n\n学习目标\n\n\n\n入门\n\n\n\n系统全面\n\n\n\n进阶\n\n\n\n\n\n\n\n\n","categories":["Learning"],"tags":["Learning"]},{"title":"《Linux核心技能与应用》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8ALinux%E6%A0%B8%E5%BF%83%E6%8A%80%E8%83%BD%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程介绍\nAndroid 和苹果的操作系统底层都是类 Linux\n\n\nAndroid：修改过的Linux\nios &#x2F; macOS ：修改过的 Unix （类Linux）\n\n\n\n\n\n\n\n第2章 Linux的安装与配置Linux 简介\nLinux 是什么：简单来说，Linux和Windows 类似，都是操作系统\n\nCentoS 是什么：开源的 Linux操作系统的发行版\n\nVirtualBox 是什么：一款开源虚拟机软件\n\n启动 : 电脑开启\n\n不同电脑的“启动界面”是不尽相同的\n正是电脑的主板(mother board)显示了“启动界面\n主板是电脑最主要的部分\n\n\n主板\n\n英语是Motherboard 或Mainboard\n又称主机板、系统板、逻辑板、母板、底板，等\n\n\nWindows 启动的必要性\n\nWindows启动后，才可以使用各种应用程序\n你的电脑需要一个类似“大管家”的软件\n“大管家”软件起到连接电脑硬件和软件的“桥梁”的作用\n\n\n操作系统是“大管家”\n\n操作系统，简称 OS，是 Operating System 的首字母\n\n\n电脑按以下顺序执行任务\n\n启动界面（主板）\n操作系统(例如 Windows)的启动\n其他程序(或称软件)的启动\n\n\nLinux就是一个操作系统\n\n\n\n类似的还有 macos，是苹果研发的操作系统\n相比于Windows，Linux 以它的可靠和安全著称，而且更新频繁\n\n\n一台电脑可以拥有两个(甚至更多)的操作系统\n当启动界面结束后，会有一个被称为 bootloader 的程序显示出来\nbootloader 让你做出选择，到底选择哪个操作系统来启动\n\n\nbootloader\n\nboot(表示“启动”)，loader(表示“加载器”)，通过这段小程序，初始化硬件设备、建立内存空间的映射图，为最终调用操作系统内核准备好正确的环境\n通常 bootloader 是严重依赖于硬件而实现的，特别在嵌入式领域\n一般在 Linux和 Windows 之间做出选择的 bootloader 叫GRUB\n如果没有做出选择，GRUB在几秒之后就会启动默认的操作系统\n\n\n不同操作系统上的程序\n\n\n\nWindows的程序在 Linux 下不能运行，反之亦然\n有些技术使 Windows的程序在 Linux 下可以运行，例如Wine，但终归是使用专为 Linux定制的程序比较好\n\n\nLinux 上的程序有很多优点\n\n\n免费:基本上 Linux上的所有程序都是免费的\n更新频繁，更新也是免费的\n不少程序的 Linux 版更优秀，有些程序没有 Windows 版\n\n\n1984：微软刚刚发布第一个操作系统:MS-DOS\n\n除了 DOS，也有一个操作系统很有名，就是 Unix；Unix 是 1969 年(或 1970年)诞生的\n\n操作系统是电脑和应用程序之间的连接工具\n\nWindows，macos和 Linux 是最常用的操作系统\n\n\n\n\n\n\nGNU 项目和 Linux 的不同发行版GNU 项目\nGNU在英语里是“牛羚”的意思\nGNU是“GNUis Not Unix” (“GNU 不是 Unix”)的递归缩写\n1984年，Richard Stallman ( 理查德斯托曼)创立了GNU 项目\n\nRichard Stallman ( 理查德斯托曼 )\n自由软件基金会( Free Software Foundation )的主席\nGNU项目的创始人\n著名黑客，1971 年进入哈佛大学学习，同年受聘于麻省理工学院\n代表作品:Emacs 编辑器，GCC 编译器，GDB 调试器\n获得过很多荣誉奖章，1991 年获得格雷斯霍普奖\nGNU项目在当时的首要目的是创立一个类Unix的操作系统\n\n自由和免费的区别\n自由的软件意味着源代码必须公开\n自由的软件大部分时候是免费的，但也可以复制，修改和出售\n\nLinus Torvalds (李纳斯·托沃兹）\n1991年Linus Torvalds 在业余时间编写了一个类Unix的内核\nLinux 这个名字可以说是 Linus 和Unix 的合并\nLinux 也可以说是“LinuxIs Not Unix”的递归缩写\n\nLinux 吉祥物\n一只名叫 Tux的萌萌的雄性企鹅。Tux 是英语“燕尾服”的意思\n为 Linux 设计吉祥物的画家征求意见，其他人提议模仿其他软件\nLinus Torvalds说:“我以前在澳大利亚被一只企鹅咬过“\n\nLinux 和 GNU 项目的联系\n这两个项目是互补的:Linus 其实就是写了一个类Unix的内核\n1991 年，GNU 项目已经创建了不少操作系统的外围软件了\nGNU 的软件 :cp 命令，rm 命令，Emacs，GCC，GDB，等\n后来完善Linux的工作交给了Linus 和广大开源社区的黑客们\nLinus是站在开源社区的巨人肩膀上的“芬兰小毛孩子” (大牛)\nGNU 项目+ Linux (系统内核)&#x3D; GNU&#x2F;Linux 完整的操作系统\n\n\n操作系统的核心称为“内核”，但内核并不就等于操作系统\n内核提供系统服务，比如文件管理、虚拟内存、设备I&#x2F;0等，还包含一些基本的程序，例如 文本编辑器，编译器，外壳程序 Shell\n单独的 Linux内核没办法工作，须要有GNU项目的众多应用程序\nLinux的官方称谓应该是“GNU&#x2F;Linux”，一般简称 Linux\n\n\nLinux 内核的官网\n\n\n\n\n\n各个操作系统之间关系\nmacos和 Linux的设计理念基于 Unix，Unix 可以说是它们的祖先\n目前大部分 Windows 版本是基于革命性的 Windows NT 内核\n我们说 macos和Linux 基于 Unix，只是说复刻了 Unix 的运行模式\n\n\n\n\n\nLinux 发行版\n因为是开源自由的，Linux 不像 Windows 那么死板\nLinux 发行版:简化用户安装的过程，以及提供一些基本的软件，这种“发行版”的概念在 Windows 可以说并没有\n\nLinux 发行版之间主要区别\n安装方法不一样:有的复杂，有的简单\n安装应用程序的方式不一样\n预装的应用程序不一样\n\n不同的 Linux 发行版\nRed Hat:性能稳定，老牌的Linux发行版。收费的是 RHEL\nFedora :Red Hat 的社区免费后继版\nCentos:算是 RHEL 的克隆版，免费。本课程使用\nDeepin:中国发行。对优秀的开源产品进行集成和配置，开发软件\nDebian :算是迄今为止，最遵循 GNU 规范的 Linux 系统\nUbuntu:Debian 的后继或一个分支\n\nRed Hat 家族主要成员\nRHEL : Red Hat 企业版\nFedora:Red Hat 的社区免费后继版\nCentos:RHEL的克隆版，免费。结合了 RHEL和 Fedora 的特性\n\nCentOS\nCentOS是Community Enterprise Operating System 的缩写\nCentOs 兼具 Community (社区)和Enterprise(企业)的特性\n融合了 Fedora和 Red Hat 企业版的优点\nCentOs 稳定、长期支持(10 年)、保守、大规模使用性能稳定\nCentoS被企业普遍使用。特别适合用来做服务器的操作系统\n\n小结\nmacos和 Windows 的源代码是闭源的(看不到)，Linux 则开源\n有很多不同的 Linux 变体，术语称为“Linux发行版“\n在众多的 Linux 发行版中，Centos 非常流行、支持很广\n\nLinux的多面特性\nWindows可是很贵的，一个操作系统要几百美元，Linux却是免费的\n不论是哪一个 Linux发行版，都有两种使用 Linux的方式：\n命令行界面 (类似DOS 操作系统)\n图形界面（类似Windows 操作系统）\n\n\n主流的桌面管理器：\nGnome\nKDE\nXFCE\n\n\n\n\n\n\n\n虚拟技术&#x2F;虚拟化( Virtualization )\n一种通过组合或分区现有的计算机资源(CPU、内存、磁盘空间等)，使得这些资源表现为一个或多个操作环境，从而提供优于原有资源配置的访问方式的技术\n\n\n\n\n\n\n\n第3章 Linux基础知识和命令","categories":["Linux"],"tags":["Linux"]},{"title":"《RabbitMQ精讲，提升工程实践能力，培养架构思维》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8ARabbitMQ%E7%B2%BE%E8%AE%B2%EF%BC%8C%E6%8F%90%E5%8D%87%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%9F%B9%E5%85%BB%E6%9E%B6%E6%9E%84%E6%80%9D%E7%BB%B4%E3%80%8BStudy-Notes/","content":"\n\n第1章 思想纲领学习RabbitMQ的必要性\n工作中: RabbitMQ的使用越来越复杂\n面试中:深入考察原理、源码、调优\n基本功: “消息化”使得编码风格和思想变化\n\n\n\n\n\n学习RabbitMQ的难点\n难在，把知识应用在实际工作中\n满足基本要求：使用Exchange完成微服务项目\n工作能力进阶：完善消息可靠性\n团队顶梁柱：集群高可用\n打造核心竞争力：分布式事务改造\n\n\n难在，RabbitMQ知识纵向的深度认知\n了解：三种Exchange使用，命令行使用\n掌握：使用基本方式快速完成项目，RabbitMQ单节点部署与配置\n熟练：SpringBoot深度整合RabbitMQ，RabbitMQ高可用集群部署\n精通：手写RabbitMQ分布式事务框架，精通SpringAMQP源码\n\n\n难在，枯燥零散学不下去\n实用:在项目中学，即学即用\n深入:基于RabbitMQ开发分布式事务框架\n平滑:不断分析项目目前不足，推动学习\n浅出:从生活中的例子认识消息中间件\n\n\n\n\n\n\n课程内容\n基于同一个项目，多次迭代\n以RabbitMQ为核心，讲深讲透\n“扶上马，送一程”，提升工程思维与架构水平\n\n\n\n\n\n\n\n第2章 树立清晰的RabbitMQ初印象中间件\n中间件(Middleware)是提供软件和软件之间连接的软件，以便于软件各部件之间的沟通\n\n\n\n\n\n同步直接调用的问题\n业务调用链过长，用户等待时间长\n部分组件故障会瘫痪整个业务\n业务高峰期没有缓冲\n\n\n\n\n\n多线程异步直接调用的问题\n可以部分解决同步直接调用的问题\n业务高峰期时产生大量的异步线程，造成线程池不够用或者内存爆满\n\n\n\n\n\n使用消息中间件的优势\n业务调用链短，用户等待时间短\n部分组件故障不会瘫痪整个业务\n业务高峰期有缓冲\n业务高峰期时不会产生大量的异步线程\n\n\n\n\n\n使用消息中间件的作用\n异步处理\n系统解耦\n流量削峰和流控\n消息广播\n消息收集\n最终一致性\n\n\n\n\n\n主流消息中间件技术ACTIVEMQ\n\n\n由Apache 出品，Java开发，支持JMS1.1协议和J2EE 1.4规范。\n支持广泛的连接协议:OpenWire&#x2F;STOMP&#x2F;REST&#x2F;XMPP&#x2F;AMQP\n支持多种语音客户端，支持插件\n管理方便，便于配置集群代理\n\n优点\n基于JAVA，跨平台运行\n可以用JDBC连接多种数据库\n有完善的界面、监控、安全机制\n自动重连和错误重试\n\n缺点\n社区活跃度不及 RabbitMQ\n目前重心放到6.0产品Apollo，对5的Bug维护较少\n不适合用于上千个队列的应用场景\n\nRabbitMQ\n\n\n\n\n当前最主流的消息中间件\n高可靠性，支持发送确认，投递确认等特性\n高可用，支持镜像队列\n支持插件\n\n优点\n基于Erlang，支持高并发\n支持多种平台，多种客户端，文档齐全\n可靠性高\n在互联网公司有较大规模的应用，社区活跃度高\n\n缺点\nErlang语言较为小众，不利于二次开发\n代理架构下，中央节点增加了延迟，影响性能\n使用AMQP协议，使用起来有学习成本\n\nRocketMQ\n\n\n\n优点\n基于Java，方便二次开发\n单机支持1万以上持久化队列\n内存与磁盘都有一份数据，保证性能+高可用\n开发度较活跃，版本更新很快\n\n缺点\n客户端种类不多，较成熟的是 Java 及 C++\n没有 Web 管理界面，提供了一个 CLI(命令行界面)\n社区关注度及成熟度不如RabbitMQ\n\nKafka\n\n\n\n\n\n\nLinkedin开发的分布式的日志提交系统\n独特的分区特性，适用于大数据系统\n性能高效、可扩展良好\n可复制、可容错\n\n优点\n原生的分布式系统\n零拷贝技术，减少10 操作步骤，提高系统吞吐量\n快速持久化:可以在 O(1)的系统开销下进行消息持久化\n支持数据批量发送和拉取\n\n缺点\n单机超过 64 个队列&#x2F;分区时，性能明显劣化\n使用短轮询方式，实时性取决于轮询间隔时间\n消费失败不支持重试\n可靠性比较差\n\n小结\nActiveMQ最“老”，老牌，但维护较慢\nRabbitMQ最“火”，适合大小公司，各种场景通杀\nRocketMQ最“猛”’，功能强，但考验公司运维能力\nKafka最“强”，支持超大量数据，但消息可靠性弱\n\n\n\n\n\nRabbitMO高性能的原因\nERLANG语言：\n由爱立信公司开发 (Ericsson Language)，一门为交换机软件开发诞生的编程语言\n通用的面向并发的编程语言，适用于分布式系统\n基于虚拟机解释运行，跨平台部署\n进程间上下文切换效率远高于C语言\n有着和原生Socket一样的延迟\n\n\n\n\n\n\n\nAMQP协议介绍\nAMQP协议作为RabbitMQ的规范，规定了RabbitMQ对外接口\n学会了AMQP协议的使用，就基本掌握了RabbitMQ的使用\n学会了AMQP协议的概念，就基本掌握了RabbitMQ的核心概念\n\n\n\n\n\n\nBroker: 接收和分发消息的应用，RabbitMQ 就是MessageBroker\nVirtual Host: 虚拟Broker，将多个单元隔离开\nConnection: publisher &#x2F; consumer和broker之间的TCP连接\nRouting Key:路由键，用来指示消息的路由转发，相当于快递的地址\nExchange:交换机，相当于快递的分拨中心\nQueue:消息队列，消息最终被送到这里等待consumer取走\nBinding:exchange和queue之间的虚拟连接，用于message的分发依据\n\n\n\n\n\nAMQP协议的核心概念-Exchange\n在AMQP协议或者是RabbitMQ实现中，最核心的组件是Exchange\nExchange承担RabbitMQ的核心功能 路由转发\nExchange有多个种类，配置多变，需要详细讲解\n\n\n\n\n\nExchange的作用\nExchange是AMQP协议和RabbitMQ的核心组件\nExchange的功能是根据绑定关系和路由键为消息提供路由，将消息转发至相应的队列\nExchange有4种类型: Direct &#x2F; Topic &#x2F; Fanout &#x2F; Headers，其中Headers使用很少，以前三种为主\n\n\n\n\n\nDirect Exchange\nMessage中的Routing Key如果和Binding Key一致，Direct Exchange则将message发到对应的queue中\n\n\n\n\n\nFanout Exchange\n每个发到Fanout Exchange的message都会分发到所有绑定的queue上去\n\n\n\n\n\nTopit Exchange\n根据Routing Key及通配规则，Topic Exchange将消息分发到目标Queue中\n全配:与Direct类似\nBinding Key中的#:匹配任意个数的word\nBinding Key中的*匹配任意1个word\n\n\n\n\n\n小结\nAMQP协议直接决定了RabbitMQ的内部结构和外部行头\n对于发送者来说，将消息发给特定的Exchange\n消息经过Exchange路由后，到达具体队列\n消费者将消息从监听的队列中取走\nExchange主要有3种类型: Direct &#x2F; Topic &#x2F; Fanout\nDirect (直接路由): Routing Key &#x3D; Binding Key，容易配置和使用\nFanout (广播路由):群发绑定的所有队列，适用于消息广播\nTopic (话题路由):功能较为复，但能降级为Direct，建议优先使用，为以后拓展留余地\n\n\n\n\n\n\n\n\n\n第3章 利用RabbitMQ基本用法，开发项目RabbitMQ消息交换的关键是什么AMQP协议架构\nAMQP协议直接定义了RabbitMQ的内部结构和外部行为\n我们使用RabbitMQ本质上是在使用AMQP协议\nAMQP协议被多种消息中间件使用，可以举一反三\n\n消息流转流程\n发送者不能直接将消息发送给最终队列，必须发送给交换机\n消息根据路由规则，消息由交换机转发给队列\n消费者从队列将消息取走\n\n合理的交换机和队列设置\n交换机数量不能过多，一般来说同一个业务，或者同一类业务使用同一个交换机\n合理设置队列数量，一般来说一个微服务监听一个队列，或者一个微服务的一个业务监听一个队列\n合理配置交换机类型，使用Topic模式时仔细设置绑定键\n\n尽量使用自动化配置\n将创建交换机&#x2F;队列的操作固化在应用代码中，免去复杂的运维操作，高效且不易出错\n一般来说，交换机由双方同时声明，队列由接收方声明并配置绑定关系\n交换机&#x2F;队列的参数一定要由双方开发团队确认，否则重复声明时，若参数不一致，会导致声明失败\n\n\n\n\n\n需求分析与架构设计需求分析\n一个外卖后端系统，用户可以在线下单外卖\n用户下单后，可以实时查询订单进度\n系统可以承受短时间的大量并发请求\n\n架构设计\n使用微服务系统，组件之间充分解耦\n使用消息中间件，解耦业务逻辑\n使用数据库，持久化业务数据\n\n\n\n\n\n（扩展）微服务架构\n将应用程序构建为松耦合、可独立部署的一组服务\n服务:一个单一的、可独立部署的软件组件，实现了一些有用的功能\n松耦合:封装服务的实现细节，通过API调用\n\n（扩展）如何拆分微服务\n根据系统操作进行微服务拆分\n根据业务能力进行微服务拆分 (推荐使用)\n根据子域进行微服务拆分\n\n\n\n\n\n根据业务能力进行微服务拆分\n订单获取和履行——》订单微服务\n供应商和产品管理——》商家微服务\n送餐、骑手管理——》骑手微服务\n记账与结算——》结算微服务\n积分管理——》积分微服务\n\n\n\n\n\n业务流程\n\n\n\n\n\n微服务对外接口\n新建订单接口、查询订单接口……\n接口采用REST风格\n\n\n\n\n\n微服务的数据库设计原则\n每个微服务使用自己的数据库\n不要使用共享数据库的方式进行通信\n不要使用外键，对于数据量非常少的表慎用索引\n\n数据库设计\n\ncreate table food;-- ------------------------------ Table structure for deliveryman-- ----------------------------DROP TABLE IF EXISTS `deliveryman`;CREATE TABLE `deliveryman`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;骑手id&#x27;,  `name` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of deliveryman-- ----------------------------INSERT INTO `deliveryman` VALUES (1, &#x27;wangxiaoer&#x27;, &#x27;AVALIABLE&#x27;, &#x27;2020-06-10 20:30:17&#x27;);-- ------------------------------ Table structure for order_detail-- ----------------------------DROP TABLE IF EXISTS `order_detail`;CREATE TABLE `order_detail`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;订单id&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `address` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;订单地址&#x27;,  `account_id` int(0) NULL DEFAULT NULL COMMENT &#x27;用户id&#x27;,  `product_id` int(0) NULL DEFAULT NULL COMMENT &#x27;产品id&#x27;,  `deliveryman_id` int(0) NULL DEFAULT NULL COMMENT &#x27;骑手id&#x27;,  `settlement_id` int(0) NULL DEFAULT NULL COMMENT &#x27;结算id&#x27;,  `reward_id` int(0) NULL DEFAULT NULL COMMENT &#x27;积分奖励id&#x27;,  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT &#x27;价格&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 403 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Table structure for product-- ----------------------------DROP TABLE IF EXISTS `product`;CREATE TABLE `product`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;产品id&#x27;,  `name` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;,  `price` decimal(9, 2) NULL DEFAULT NULL COMMENT &#x27;单价&#x27;,  `restaurant_id` int(0) NULL DEFAULT NULL COMMENT &#x27;地址&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of product-- ----------------------------INSERT INTO `product` VALUES (2, &#x27;eqwe&#x27;, 23.25, 1, &#x27;AVALIABLE&#x27;, &#x27;2020-05-06 19:19:04&#x27;);-- ------------------------------ Table structure for restaurant-- ----------------------------DROP TABLE IF EXISTS `restaurant`;CREATE TABLE `restaurant`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;餐厅id&#x27;,  `name` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;,  `address` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;地址&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `settlement_id` int(0) NULL DEFAULT NULL COMMENT &#x27;结算id&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of restaurant-- ----------------------------INSERT INTO `restaurant` VALUES (1, &#x27;qeqwe&#x27;, &#x27;2weqe&#x27;, &#x27;OPEN&#x27;, 1, &#x27;2020-05-06 19:19:39&#x27;);-- ------------------------------ Table structure for reward-- ----------------------------DROP TABLE IF EXISTS `reward`;CREATE TABLE `reward`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;奖励id&#x27;,  `order_id` int(0) NULL DEFAULT NULL COMMENT &#x27;订单id&#x27;,  `amount` decimal(9, 2) NULL DEFAULT NULL COMMENT &#x27;积分量&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Table structure for settlement-- ----------------------------DROP TABLE IF EXISTS `settlement`;CREATE TABLE `settlement`  (  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT &#x27;结算id&#x27;,  `order_id` int(0) NULL DEFAULT NULL COMMENT &#x27;订单id&#x27;,  `transaction_id` int(0) NULL DEFAULT NULL COMMENT &#x27;交易id&#x27;,  `amount` decimal(9, 2) NULL DEFAULT NULL COMMENT &#x27;金额&#x27;,  `status` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;状态&#x27;,  `date` datetime(0) NULL DEFAULT NULL COMMENT &#x27;时间&#x27;,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 1168 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n\n\n\n\n\nSpringBoot项目搭建\n选择Lombok、SpringWeb、MyBatis、MySQL Driver、Spring for RabbitMQ 插件\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n备注\n\n作业：推荐 draw.io 绘图网站，绘制amqp协议结构图\n在tryrabbitmq.com 网站中，搭建三种Exchange模型\n3.1的作业 你认为，为什么AMQP要设计Exchange消息流转机制?\n\n\n","categories":["MQ","RabbitMQ"],"tags":["MQ","RabbitMQ"]},{"title":"《大话HTTP协议》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E5%A4%A7%E8%AF%9DHTTP%E5%8D%8F%E8%AE%AE%E3%80%8BStudy-Notes/","content":"","categories":["Network","HTTP"],"tags":["HTTP","Network"]},{"title":"《SpringBoot3.0 + RocketMq 构建企业级数据中台》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8ASpringBoot3-0-RocketMq-%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程引言课程导学企业数据应用问题引入\n开发效率低下\n数据重复开发\n数据质量低下\n数据孤岛\n\n课程介绍\n业务背景:智慧校园场景\n场景问题引入\n数据中台\n\n课程安排\n\n\n\n课程特色\n手把手代码开发，真正带你从零开始体验\n组件式开发\n源码深度实践\n架构设计模式\n企业完整项目流程和开发体验\n\n课程收获\n理解数据中台架构理念，实现数据中台的构建\n积累实际企业项目开发经验\n培养解决问题的能力和思路\n提高对SpringBoot源码的认知深度，从源码转化为技术能力\n提高编码质量\n\n适合人群\n想体验企业完整项目开发流程，积累开发经验\n想要构建企业数据中台的开发人群\n想要提升技能水平，突破瓶颈，晋级中高级的人群\n\n\n\n\n\n数据中台项目展示及技术栈梳理项目展示\n略\n\n技术栈梳理\n前端：Vue 3.2.13\n服务端：SpringBoot 3.0.5\n\n服务端技术要点\nSpringBoot 3.0.5\nJDK17\n动态多数据源技术\nMybatis Plus 3.5.3\nRocketMQ 5.0.0\nElasticJob 3.0.2\nDubbo 3.2.0-beta.6\nGoogle aviator 5.3.3\n架构设计模式\nMapStruct 1.5.3.Final\n\n\n\n\n\n学习建议\n课程学习方法：\n动手撸代码\n\n\n组件源码学习方法：\n先抓住主干，骨架\n\n\n\n\n\n\n\n\n\n第2章 认知数据中台\n\n\n\n\n\n第3章 数据中台建设 - 前置理论基础\n\n\n\n\n\n第4章 构建数据模型 - 数据处理的原材料\n\n\n\n\n","categories":["SpringBoot","RocketMQ","数据中台"],"tags":["RocketMQ","数据中台","SpringBoot"]},{"title":"《玩转 Git 三剑客》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E7%8E%A9%E8%BD%AC-Git-%E4%B8%89%E5%89%91%E5%AE%A2%E3%80%8BStudy-Notes/","content":"\n\n第一章：Git基础 (13讲)版本控制系统 &#x2F; VCS\n版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统\n\n本地版本控制系统\n⽤用⽬目录拷⻉贝区别不不同版本\n公共⽂文件容易易被覆盖\n成员沟通成本很⾼高，代码集成效率低下\n\n集中式 VCS\n有集中的版本管理理服务器器\n具备文件版本管理和分支管理能力\n集成效率有明显地提⾼高\n客户端必须时刻和服务器器相连\n\n分布式 VCS\n服务端和客户端都有完整的版本库\n脱离服务端，客户端照样可以管理理版本\n查看历史和版本⽐比较等多数操作，都不不需要访问服务器器，⽐比集中式 VCS 更更能提⾼高版本管理理效率\n\n\n\n\n\nGit 的特点\n最优的存储能⼒力\n非凡的性能\n开源的\n很容易易做备份\n支持离线操作\n很容易易定制⼯工作流程\n\n\n\n\n\nGit 最小配置\n配置用户信息\n\ngit config --global user.name &#x27;user_name&#x27;git config --global user.email &#x27;user_email&#x27;\n\n\nconfig 的三个作用域（缺省等同于 local）\n\n# local只对仓库有效git config --local# global对登录⽤用户所有仓库有效git config --global# system对系统的所有⽤用户有效$ git config --system\n\n\n显示 config 的配置\n\ngit config --list --localgit config --list --globalgit config --list --system\n\n\n设置（缺省等同于 local）\n\ngit config --localgit config --globalgit config --system\n\n\n清除\n\ngit config --unset --local user.namegit config --unset --global user.namegit config --unset --system user.name\n\n\n优先级：local &gt; global &gt; system\n\n\n\n\n\nGit 基本命令cd [project_dir]git initgit init [project_name]\n\n\n工作目录、暂存区、版本历史\n\ngit add .git add [file1] [file2]git commit -m&#x27;add file remark&#x27;git mv [filename] [filename]# 添加到暂存区后直接commitgit commit -am&#x27;add file remark&#x27;# 直接切换到某个commit，即分离头指针git checkout [commit_id]# 基于某个存在的分支（commit），创建新分支，并检出，切换到该新分支git checkout -b [new branch name] [branch_name/commit_id]git diff [commit_id] [commit_id]git diff HEAD HEAD^1/HEAD^^/HEAD~1/HEAD~2\n\n\n\ngit loggit log --onelinegit log --oneline --allgit log --oneline --all --graphgit log --oneline --all --graph -n4git log --oneline --graph [branch_name]git help --web loggitk\n\n\n\n\n\n探密.git目录# 查看对象类型git cat-file -t hash_num# 看对象内容git cat-file -p hash_num\n\n\n\n\n\n\n\n第二章：独自使用Git时的常见场景 (16讲)git branch -avgit branch -d [branch_name]git branch -D [branch_name]# （在自己的分支上）对最近一次 commit 的message进行修改git commit --amend# （在自己的分支上）对历史 commit 的message进行修改，（选择r）git rebase -i [commit_id]# （在自己的分支上）把多个commit信息合并到一起（选择s）、还可以对不连续的commit 信息进行合并git rebase -i [pre commit_id]# 暂存区和head进行比较git diff --cached# 工作区和暂存区的区别比较（所有文件）git diff# 工作区和暂存区的区别比较（指定文件）git diff -- [file name]# 暂存区恢复成HEAD，但是变更的内容会在工作区git reset HEADgit reset HEAD -- [file_name] [file_name]# 丢掉工作区某个文件git checkout -- [file_name]# 丢弃commitgit reset --hard [commit_id]# 比较不同commit差异git diff [branch_name] [branch_name] -- [file_name]git diff [commit_id] [commit_id] -- [file_name]# 直接删除，并保存在暂存区git rm [file_name]git stashgit stash list# 弹出暂存内容，并保存在暂存区git stash apply# 弹出暂存内容，并不保存git stash pop\n\n\n\n\n\n.gitignore# 不管理doc文件，以及doc文件夹下的内容doc# 管理doc文件，不管理doc文件夹下的内容doc/\n\n\n\n\n\nGit 备份git remote -vgit remote add \n\n\n\n\n\n\n\n第三章：Git与GitHub的简单同步 (4讲)# 本地仓库和远端仓库建立链接git remote add [remote_repo_name] [url]# 把本地仓库所有分支内容推送到远端仓库git push [remote_repo_name] --all# 把远端仓库分支拉取到本地git fetch [remote_repo_name] [remote_repo_branch]\n\n\n\n\n\n\n\n第四章：Git多人单分支集成协作时的常见场景 (5讲)\n\n\n\n\n\n第五章：Git集成使用禁忌 (2讲)\n禁止使用：git push -f origin branch_name\n\n\n\n\n\n\n\n说明\n29 讲，git备份还需要再学习熟悉一下\nrebase？\nfetch?\n\n","categories":["Git"],"tags":["Git"]},{"title":"《RocketMQ核心技术精讲与高并发抗压实战》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8ARocketMQ%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%B2%BE%E8%AE%B2%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E6%8A%97%E5%8E%8B%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程介绍两大模块\n核心技术讲解与原理分析：\n最新版本使用\n学以致用\n原理分析及源代码剖析\n体会RocketMQ设计思想\n\n\n双十一抗压实战基于RocketMQ落地\n\n\n\n\n\n学完课程可以获得的技能\n掌握RocketMQ核心应用，更好的应对工作中MQ相关挑战\n掌握RocketMQ集群搭建，助力快速投入到生产环境中\n生产者: 轻松解决消息同步&#x2F;异步、延迟、顺序等问题\n消费者: 真正理解Offset存储机制、消费端重试、幂等策略\n核心原理，进阶掌握高可用机制、协调服务，刷盘赋值策略\nSpringBoot2.x + Dubbo + Hystrix + RocketMO\n分流&#x2F;限流，缓存路由，负载均衡，分库分表，抗压点分析\n理解电商平台双十一高并发抗压的全链路核心流程\n\n\n\n\n\n课程安排\nRocketMQ-初探门径\n\n.RocketMQ整体认知\n核心概念模型解析\n源码结构解析\n编译部署&amp;环境搭建\nSpringBoot控制台讲解\n\n\nRocketMQ-急速入门\n\n生产者模型使用\n消费者模型使用\n四种集群环境讲解\n主从集群环境构建\n数据高可用机制故障演练\n\n\nRocketMQ-生产者核心\n\n配置参数解析\n主从同步机制解析\n同步&#x2F;异步消息发送解析\n底层Netty通信解析\n延迟消息投递解析\n\n\nRocketMQ-消费者核心\n\n配置参数详解\n集群与广播模式解析\n消息存储核心-OffSet解析\n消费者底层解析与最佳实践\n消息推拉模式解析\n\n\nRocketMQ-原理解析\n\n消息存储结构解析\n同步&#x2F;异步刷盘解析\n同步&#x2F;异步复制解析\n高可用机制解析\nNameServer协调者解析\n\n\n\n\n\n\n\n适合人群\nJava中高级工程师\n想彻底掌握RocketMQ消息中间件技术的小伙伴\n想把RocketMQ结合到高并发实战场景的小伙伴\n想提升技术深度、广度，面试中能够脱颖而出的工程师\n\n\n\n\n\n技术储备要求\n具备一定的自学能力\n具备Java基础，Linux基础、SpringBoot基础\n了解分布式rpc框架 (dubbo)、zookeeper\n\n\n\n\n\n\n\n第2章 RocketMQ初探门径RocketMQ-整体介绍\nRocketMQ是一款分布式、队列模型的消息中间件\n4.x版本开始支持分布式事务\n支持集群模型、负载均衡、水平扩展能力\n亿级别的消息堆积能力\n采用零拷贝的原理、顺序写盘、随机读\n丰富的API使用\n代码优秀，底层通信框架采用Netty NIO框架\nNameServer 代替 Zookeper\n强调集群无单点，可扩展，任意一点高可用，水平可扩展\n消息失败重试机制、消息可查询\n开源社区活跃、成熟度(经过双十一考验）\n\n\n\n\n\nRocketMQ-核心概念模型\nProducer:消息生产者，负责产生消息，一般由业务系统负责产生消息\nConsumer:消息消费者，负责消费消息，一般是后台系统负责异步消费\nPush Consumer: Consumer的一种，需要Consumer对象注册监听\nPull Consumer: Consumer的一种，需要主动请求Broker拉取消息\nProducer Group: 生产者集合，一般用于发送一类消息\nConsumer Group:消费者集合，一般用于接受一类消息进行消费\nBroker: MQ消息服务 (中转角色，用于消息存储与生产消费转发）\n\n\n\n\n\nRocketMQ-源码包下载与结构说明\n官网地址下载源码包rocketmq-all-4.3.0-source-release.zip解压后，eclipse引入工程时修正小错误\n\n执行命令：mvn -Prelease-all -DskipTests clean install -U，BUILD SUCCESS后会在rocketmq-distribution/target/目录下生成apache-rocketmq.tar.gz文件\n\nrocketmq-broker 主要的业务逻辑，消息收发，主从同步，pagecache\n\nrocketmq-client 客户端接口，比如生产者和消费者\n\nrocketmq-example 示例，比如生产者和消费者\n\nrocketmq-common 公用数据结构等等\n\nrocketmq-distribution 编译模块，编译输出等\n\nrocketmg-fliter 进行Broker过滤的不感兴趣的消息传输，减小带宽压力\n\nrocketmq-logappender、rocketmq-logging日志相关\n\nrocketmq-namesrv Namesrv服务，用于服务协调\n\nrocketmq-openmessaging 对外提供服务\n\nrocketmq-remoting 远程调用接口，封装Netty底层通信\n\nrocketmq-srvutil 提供了处理命令行参数的功能\n\nrocketmq-store 消息存储\n\nrocketmq-test 、rocketmq-example\n\nrocketmg-tools 管理工具，比如有名的mqadmin工具\n\n\n\n\n\n\nRocketMQ-环境搭建环境准备\nCentOS 7\n\nJDK1.8+\n\nRocketMQ 4.3.X\n\n\n单Master环境搭建\nPS：注意开通网络端口或关闭防火墙\n\n# （1）配置hosts信息vim /etc/hosts192.168.61.220 rocketmq-nameserver1192.168.61.220 rocketmq-master1# （2）上传 apache-rocketmq.tar.gz 包到服务器 /usr/local/src/cd /usr/local/src/# （3）解压，创建软连接mkdir -p /usr/local/apache-rocketmq-4.3.0tar -zxvf /usr/local/src/apache-rocketmq.tar.gz -C /usr/local/apache-rocketmq-4.3.0ln -s /usr/local/apache-rocketmq-4.3.0 /usr/local/rocketmq# （4）创建存储路径# store：rocketmq数据存储目录，commitlog：真正存储rocketmq 实际数据，consumequeue：逻辑存储，index 索引存储mkdir /usr/local/rocketmq/storemkdir /usr/local/rocketmq/store/commitlogmkdir /usr/local/rocketmq/store/consumequeuemkdir /usr/local/rocketmq/store/index# （5）配置RocketMQ配置文件vim /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties#所属集群名字brokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-a#0 表示 Master，&gt;0 表示 SlavebrokerId=0#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128# （6）修改日志配置文件，日志全局替换mkdir -p /usr/local/rocketmq/logscd /usr/local/rocketmq/conf &amp;&amp; sed -i &#x27;s#$&#123;user.home&#125;#/usr/local/rocketmq#g&#x27; *.xml# （7）修改启动脚本参数vim /usr/local/rocketmq/bin/runbroker.sh#===========================================================================================# JVM Configuration#===========================================================================================JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m&quot;JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&quot;vim /usr/local/rocketmq/bin/runserver.sh#===========================================================================================# JVM Configuration#===========================================================================================JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:SurvivorRatio=8  -XX:-UseParNewGC&quot;# （8）启动 NameServercd /usr/local/rocketmq/binnohup sh mqnamesrv &amp;nohup sh /usr/local/rocketmq/bin/mqnamesrv &amp;# （9）启动 BrokerServercd /usr/local/rocketmq/binnohup sh mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;nohup sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;# （10）验证启动的服务，查看启动日志，观察服务启动情况# 查看 BrokerStartup 和 NamesrvStartup 服务是否存在jpstail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.logtail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log# （11）关闭服务cd /usr/local/rocketmq/binsh mqshutdown brokersh mqshutdown namesrv\n\n\n\n\n\nRocketMQ-控制台部署与使用git clone git@github.com:apache/rocketmq-dashboard.git# 打开工程，修改配置文件 namesrvAddrs 为我们的RocketMQ服务器地址 启动即可git clone git@github.com:Xuchengen/rocketmq-console.git# 打开工程，修改配置文件 namesrvAddrs 为我们的RocketMQ服务器地址 启动即可\n\n\n\n\n\n\n\n第3章 RocketMQ急速入门QuickStart-生产者使用package com.stu.quickstart;import org.apache.rocketmq.client.exception.MQBrokerException;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.client.producer.DefaultMQProducer;import org.apache.rocketmq.client.producer.SendResult;import org.apache.rocketmq.common.message.Message;import org.apache.rocketmq.remoting.exception.RemotingException;public class Producer &#123;    public static void main(String[] args) throws MQClientException, MQBrokerException, RemotingException, InterruptedException &#123;        //（1)创建生产者对象DefaultMQProducer        DefaultMQProducer producer = new DefaultMQProducer(&quot;test_quick_producer_name&quot;);        //（2）设置NamesrvAddr        producer.setNamesrvAddr(&quot;192.168.61.220:9876&quot;);        //（3）启动生产者服务        producer.start();        for (int i = 0; i &lt; 10; i++) &#123;            //（4）创建消息并发送            Message message = new Message(                    &quot;test_quick_topic&quot;,                    &quot;tagB&quot;,                    &quot;key&quot;+i,                    (&quot;hello RocketMQ &quot;+i).getBytes()            );            SendResult sr = producer.send(message);            System.out.println(&quot;sr = &quot; + sr);        &#125;        producer.shutdown();    &#125;&#125;\n\n\n\n\n\nQuickStart-消费者使用package com.stu.quickstart;import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.common.consumer.ConsumeFromWhere;import org.apache.rocketmq.common.message.MessageExt;import org.apache.rocketmq.remoting.common.RemotingHelper;import java.util.List;public class Consumer &#123;    public static void main(String[] args) throws MQClientException &#123;        //（1）创建消费者对象 DefaultMQPushConsumer        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;test_quick_consumer_name&quot;);        //（2）设置NamesrvAddr        consumer.setNamesrvAddr(&quot;192.168.61.220:9876&quot;);        //（3）设置消费位置        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);        //（4）进行订阅主题subscribe        consumer.subscribe(&quot;test_quick_topic&quot;,&quot;*&quot;);        //（5）注册监听并消费 registerMessageListener        consumer.registerMessageListener(new MessageListenerConcurrently() &#123;            @Override            public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123;                MessageExt me = list.get(0);                try &#123;                    String topic = me.getTopic();                    String tags = me.getTags();                    String keys = me.getKeys();\t\t\t\t\tif(keys.equals(&quot;key1&quot;)) &#123;\t\t\t\t\t\tSystem.err.println(&quot;消息消费失败..&quot;);\t\t\t\t\t\tint a = 1/0;\t\t\t\t\t&#125;                    String msgBody = new String(me.getBody(), RemotingHelper.DEFAULT_CHARSET);                    System.err.println(&quot;topic: &quot; + topic + &quot;,tags: &quot; + tags + &quot;, keys: &quot; + keys + &quot;,body: &quot; + msgBody);                &#125;catch (Exception e) &#123;                    e.printStackTrace();\t\t\t\t\tint recousumeTimes = me.getReconsumeTimes();\t\t\t\t\tSystem.err.println(&quot;recousumeTimes: &quot; + recousumeTimes);\t\t\t\t\tif(recousumeTimes == 3) &#123;\t\t\t\t\t\t//\t\t记录日志....\t\t\t\t\t\t//  \t做补偿处理                        System.out.println(&quot;记录日志....做补偿处理&quot;);\t\t\t\t\t\treturn ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\t\t\t\t\t&#125;                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;                &#125;                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;            &#125;        &#125;);        consumer.start();    &#125;&#125;\n\n\n\n\n\n四种集群环境构建详解\n\n\n\n\n单点模式\n主从模式（主从模式环境构建可以保障消息的即时性与可靠性）\n双主模式\n双主双从模式、多主多从模式\n\n\n\n\n\n主从模式集群环境构建与测试\n主从模式环境构建可以保障消息的即时性与可靠性\n\n环境准备\n\nCentOS 7\n\nJDK1.8+\n\nRocketMQ 4.3.X\n\n\n\n环境搭建\n\n\n\nPS：注意开通网络端口或关闭防火墙\n\n（1）配置hosts信息（两台机器）\nvim /etc/hosts\n\n192.168.61.221  rocketmq-nameserver1192.168.61.221  rocketmq-master1192.168.61.222  rocketmq-nameserver2192.168.61.222  rocketmq-master1-slave\n\n\n\n\n下面步骤，我们先配置好一台机器（192.168.61.221）的环境，然后直接把文件拷贝到另一台机器即可\n\n（2）上传 apache-rocketmq.tar.gz 包到服务器 &#x2F;usr&#x2F;local&#x2F;src&#x2F;\n（3）解压，创建软连接\nmkdir -p /usr/local/apache-rocketmq-4.3.0tar -zxvf /usr/local/src/apache-rocketmq.tar.gz -C /usr/local/apache-rocketmq-4.3.0ln -s /usr/local/apache-rocketmq-4.3.0 /usr/local/rocketmq\n\n\n\n（4）创建存储路径\n# store：rocketmq数据存储目录，commitlog：真正存储rocketmq 实际数据，consumequeue：逻辑存储，index 索引存储mkdir /usr/local/rocketmq/storemkdir /usr/local/rocketmq/store/commitlogmkdir /usr/local/rocketmq/store/consumequeuemkdir /usr/local/rocketmq/store/index\n\n\n\n（5）修改日志配置文件，日志全局替换\nmkdir -p /usr/local/rocketmq/logscd /usr/local/rocketmq/conf &amp;&amp; sed -i &#x27;s#$&#123;user.home&#125;#/usr/local/rocketmq#g&#x27; *.xml\n\n\n\n（6）修改启动脚本参数\nvim /usr/local/rocketmq/bin/runbroker.sh\n\n#===========================================================================================# JVM Configuration#===========================================================================================JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m&quot;JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&quot;\n\nvim /usr/local/rocketmq/bin/runserver.sh\n\n#===========================================================================================# JVM Configuration#===========================================================================================JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:SurvivorRatio=8  -XX:-UseParNewGC&quot;\n\n\n\n（7）配置RocketMQ配置文件（2台机器）\n\n192.168.61.221 &amp; 192.168.61.222\n\nvim /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties\n\n#所属集群名字brokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-a#0 表示 Master，&gt;0 表示 SlavebrokerId=0#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128\n\n\n\nvim /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties\n\n#所属集群名字brokerClusterName=rocketmq-cluster#broker 名字，注意此处不同的配置文件填写的不一样brokerName=broker-b#0 表示 Master，&gt;0 表示 SlavebrokerId=1#nameServer 地址，分号分割namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4 点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog 每个文件的大小默认 1GmapedFileSizeCommitLog=1073741824#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/usr/local/rocketmq/store#commitLog 存储路径storePathCommitLog=/usr/local/rocketmq/store/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue#消息索引存储路径storePathIndex=/usr/local/rocketmq/store/index#checkpoint 文件存储路径storeCheckpoint=/usr/local/rocketmq/store/checkpoint#abort 文件存储路径abortFile=/usr/local/rocketmq/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制 Master#- SYNC_MASTER 同步双写 Master#- SLAVEbrokerRole=SLAVE#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128\n\n\n\n（8）把配置好的文件上传到另一台机器\nscp -prv /usr/local/apache-rocketmq-4.3.0 root@192.168.61.222:/usr/local/\n\n# 进入 192.168.61.222 机器的 ，创建软连接ln -s /usr/local/apache-rocketmq-4.3.0 /usr/local/rocketmq\n\n\n\n（9）启动 NameServer\ncd /usr/local/rocketmq/binnohup sh mqnamesrv &amp;\n\nnohup sh /usr/local/rocketmq/bin/mqnamesrv &amp;\n\n\n\n（9）启动 BrokerServer（两台机器）\n\n192.168.61.221\n\ncd /usr/local/rocketmq/binnohup sh mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;# 或者nohup sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;\n\n\n192.168.61.222\n\ncd /usr/local/rocketmq/binnohup sh mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties &gt;/dev/null 2&gt;&amp;1 &amp;# 或者nohup sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties &gt;/dev/null 2&gt;&amp;1 &amp;\n\n\n\n（10）验证启动的服务，查看启动日志，观察服务启动情况（两台机器）\n# 查看 BrokerStartup 和 NamesrvStartup 服务是否存在jps\n\n# PS：注意开通网络端口或关闭防火墙tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.logtail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log\n\n\n\n（11）关闭服务\ncd /usr/local/rocketmq/binsh mqshutdown brokersh mqshutdown namesrv\n\n\n\n\n\n模拟故障\n投递一条消息后，关闭主节点；从节点继续可以提供消费者数据进行消费，但是不能接收消息；主节点上线后进行消费进度offset同步\n\n\n\n\n\n\n\n第4章 RocketMQ生产者核心讲解生产者-核心参数详解\nproducerGroup :组名；一个应用中唯一\ncreateTopicKey；生产者端创建topic。最佳实战：一般由架构组创建，不把这个暴露\ndefaultTopicQueueNums(默4)；默认的一个topic下有4个队列\nsendMsgTimeout (单位:ms)；发送消息超时时间\ncompressMsgBodyOverHowmuch(默认压缩字节4096)，消息超过4096字节就压缩消息体\nretryTimesWhenSendFailed (可配置）消息发送失败重试机制\nretryAnotherBrokerWhenNotStoreOK(默认false)；没有存储成功去其它brocker进行存储\nmaxMessageSize(默认128K)，默认最大消息大小\n\n\n\n\n\n主从同步机制分析\nMaster - Slave主从同步\n同步信息：数据内容（原生socket同步）+元数据信息（使用Netty，定时任务同步）\n元数据同步:Broker 角色识别，为Slave则启动同步任务\n消息同步: HAService、 HAconnection、 WaitNotfiyQbiect\n\n\n\n\n\n同步消息发送\n消息的同步发送:producer.send(msg)\n同步发送消息核心实现: DefaultMQProducerlmpl\n\n\n\n\n\n异步消息发送\nproducer.send(Message msg, SendCallback sendCallback)\n异步发送消息核心实现: DefaultMQProducerlmpl\n\n\n\n\n\nNetty底层通信框架解析\n\n\n\n\n\n生产者-消息返回状态详解\nSEND_OK\nFLUSH_DISK_TIMEOUT\nFLUSH_SLAVE_TIMEOUT\nSLAVE_NOT_AVAILABLE\n\n\n\n\n\n生产者-延迟消息\n延迟消息:消息发到 Broker 后，要特定的时间才会被Consumer消费\n目前只支持固定精度的定时消息\nMessageStoreConfig配置类&amp;ScheduleMessageService任务类\nsetDelayTimeLevel方法设置\n\n\n\n\n\n生产者-自定义消息发送规则\nMessageQueueSelector\nproducer.send(Msg, selector, Obj)\n\n\n\n\n\n\n\n第5章 RocketMQ消费者核心讲解PushConsumer核心参数详解\nconsumeFromWhere\nallocateMessageQueueStrategy\nsubscription\noffsetStore\nconsumeThreadMin&#x2F;consumeThreadMax\nconsumeConcurrentlyMaxSpan&#x2F; pullThresholdForQueue\npullinterval&#x2F; pullBatchSize\nconsumeMessageBatchMaxSize\n\n\n\n\n\nPushConsumer消费模式-集群模式\nClustering模式(默认)\nGroupName用于把多个Consumer组织到一起；相同GroupName的Consumer只消费所订阅消息的一部分；目的:达到天然的负载均衡机制\n\n\n\n\n\nPushConsumer消费模式-广播模式\nBroadcasting模式(广播模式)\n同一个ConsumerGroup里的Consumer都消费订阅Topic全部信息；也就是一条消息会被每一个Consumer消费\nsetMessageModel方法\n\n\n\n\n\n消息存储核心-偏移量Offset\nOffset是消息消费进度的核心\nOffset指某个topic下的一条消息在某个MessageQueue里的位置\n通过Offset可以进行定位到这条消息\nOffset的存储实现分为远程文件类型和本地文件类型两种\n\n\n\n\n\n集群模式-RemoteBrokerOffsetStore解析\n默认集群模式clustering，采用远程文件存储Offset\n本质上因为多消费模式，每个Consumer消费所订阅主题的一部分\n这种情况需要broker控制offset的值，使用RemoteBrokerOffsetStore\n\n\n\n\n\n广播模式-LocalFileOffsetStore解析\n广播模式下，由于每个Consumer都会收到消息且消费\n各个Consumer之间没有任何干扰，独立线程消费\n所以使用LocalFileOffsetStore，也就是把Offset存储到本地\n\n\n\n\n\n消费者长轮询模式分析\nDefaultPushConsumer是使用长轮询模式进行实现的\n通常主流消息获取模式:Push消息推送模式&amp;Pull消息拉取模式\n长轮询机制\n\n\n\n\n\nRocketMQ消费者-PullConsumer使用\n消息拉取方式: DefaultMQPullConsumer\nPull方式主要做了三件事：\n获取Message Queue并遍历\n维护OffsetStore\n根据不同的消息状态做不同的处理\n\n\n\n\n\n\n\n\n\n第6章 RocketMQ核心原理解析消息的存储结构\n\n\n\n\n\n同步刷盘与异步刷盘\nRocketMQ消息存储:内存+磁盘存储，两种刷盘方式\n异步刷盘\n同步刷盘\n\n\n\n\n\n同步复制与异步复制\n同一组Broker有Master - Slave角色\n异步复制\n同步复制\n\n\n\n\n\n高可用机制\nMaster -Slave 高可用\nBrokerld\nMaster读、写，Slave只读\n当Master繁忙或者不可用时，可以自动切换到Slave读取消息\n\n\n\n\n\nNameServer协调者\n为什么需要NameServer\nNameServer是整个集群的状态服务器\nNameServer部署、相互独立\n为什么不用zookeeper?\nNameServer维护元数据信息\n\n\n\n\n\n\n\n第7章 双主双从部署实战\n\n\n\n\n\n第8章 购物车、订单与支付场景抗压需求分析\n\n\n\n\n\n第9章 微服务基础设施构建\n\n\n\n\n\n第10章 高并发抗压实战\n\n\n\n\n\n第11章 RocketMQ分布式事务消息\n\n\n\n\n\n第12章 RocketMQ顺序消费与微服务解耦\n\n\n\n\n\n第13章 数据过滤与性能提升\n\n\n\n\n\n第14章 课程总结\n\n\n\n\n\nReferences\nRocketMQ核心技术精讲与高并发抗压实战——RocketMQ核心API+抗压分析与实战+分布式事务+顺序消费与微服务解耦+数据过滤与性能提升\n\n\n\n\n\n\n\n备注\n\n生产者核心配合和代码需要实践\n如何保证消息可靠投递，这是一个重点，可以参考老师的免费课，rabbitmq里的内容\n\n\n","categories":["MQ","RocketMQ"],"tags":["MQ","RocketMQ"]},{"title":"《Web 协议详解与抓包实战》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8AWeb-%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/","content":"\n\n第一章：HTTP1.1协议（38讲）浏览器发起 HTTP 请求的典型场景\n\n\n\n\n\n\n\n\n\nHypertext Transfer Protocol (HTTP) 协议\na stateless application-level request&#x2F;response protocol that usesextensible semantics and self-descriptive message payloads for flexibleinteraction with network-based hypertext information systems（RFC7230 2014.6）\n一种无状态的、应用层的、以请求&#x2F;应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动\n\n","categories":["Network"],"tags":["Network"]},{"title":"《透视 HTTP 协议》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E9%80%8F%E8%A7%86-HTTP-%E5%8D%8F%E8%AE%AE%E3%80%8BStudy-Notes/","content":"","categories":["Network","HTTP"],"tags":["HTTP","Network"]},{"title":"《玩转数据结构》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8BStudy-Notes/","content":"\n\n第1章 欢迎学习《玩转数据结构》","categories":["DataStructure","Algorithm"],"tags":["DataStructure","Algorithm"]},{"title":"《玩转MongoDB4.0(最新版) 从入门到实践》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E7%8E%A9%E8%BD%ACMongoDB4-0-%E6%9C%80%E6%96%B0%E7%89%88-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E3%80%8BStudy-Notes/","content":"\n\n第1章 课程导学为什么选择MongoDB\n灵活性\n可扩展性\n强大的查询语言\n优异性能\n\n\n\n\n\n课程介绍\n零基础：基本操作，快速入门\n新手进阶：原理讲解，高阶特性\n运维支持：日常维护，故障诊断\n\n\n\n\n\n学习收获\n快速入门MongoDB基本操作\n独立搭建支持MongoDB的web服务\n为进一步提高学习打下牢固基础\n掌握常用的数据库管理工具\n覆盖70%官方认证核心知识点\n\n\n\n\n\n\n\n第2章 程序媛姐姐带你初识MongoDBMongoDB是什么\nMongoDB：文档存储\nRedis：键值存储\nCassandra：列存储\nObjectivity&#x2F;DB：对象存储\nNeo4j：图形存储\n\n\n\n\n\n\n\n第3章 MongoDB基本操作之CRUD概述\n存储在MongoDB中的每一篇文档都有一个专属id：文档主键id\n文档主键id全局唯一\nMongoDB支持所有数据类型（数组除外）\n复合主键\n\n\n\n\n\n对象主键ObjectId\n默认的文档主键\n可以快速生成12字节id\n包含创建时间\n\n\n\n\n\n创建文档db.collection.insert()db.collection.insert()\n\n\n\n\n使用mongo shell创建文档\n\n/** 使用test数据库 */use test/** 查看test数据库中的集合 */show collections/** db.&lt;collection&gt;.insertOne 会自动创建集合&lt;collection&gt;表示文档将要写入的集合&lt;document&gt; 表示要写入的文档本身这里的writeConcern文档定义了本次文档创建操作的安全写级别；简单来说，安全写级别用来判断一次数据库写入操作是否成功安全写级别越高，丢失数据的风险就越低，然而写入操作的延迟也可能更高。如果不提供writeConcern文档，mongoDB使用默认的安全写级别省略 _id 字段则会自动生成_id*/    db.&lt;collection&gt;.insertOne(   &lt;document&gt;,   &#123;      writeConcern: &lt;document&gt;   &#125;)    db.col.insert(&#123;title: &#x27;MongoDB 教程&#x27;,     description: &#x27;MongoDB 是一个 Nosql 数据库&#x27;,    by: &#x27;菜鸟教程&#x27;,    url: &#x27;http://www.runoob.com&#x27;,    tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;],    likes: 100&#125;)&#123; acknowledged: true, insertedId: &#x27;aacount1&#x27; &#125;/**由于我们在db.collection.insertone()命令中并没有提供writeConcern文档，这里显示的是mongoDB默认的安全写级别启用状态&quot;insertedd 显示了被写入的文档的 id&quot;*//** db.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：将多个需要创建的文档作为一个数组传入 db,collection.insertMany()ordered：指定是否按顺序写入，默认 true，按顺序写入;如果将ordered参数设置为 false，mongoDB可以打乱文档写入的顺序，以便优化写入操作的性能;在顺序写入时，一旦遇到错误，操作便会退出，剩余的文档无论正确与否，都不会被写入在乱序写入时，即时某些文档造成了错误，剩余的正确文档仍然会被写入所以第二篇文档会被正常写入数据库*/db.collection.insertMany(   [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],   &#123;      writeConcern: &lt;document&gt;,      ordered: &lt;boolean&gt;   &#125;)    /** 创建单个或多个文档 */    db.collection.insert()\n\n\n\n","categories":["DataBase","MongoDB"],"tags":["MongoDB","DataBase"]},{"title":"《零基础入门 详解企业主流数据库MySQL8.0》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%AF%A6%E8%A7%A3%E4%BC%81%E4%B8%9A%E4%B8%BB%E6%B5%81%E6%95%B0%E6%8D%AE%E5%BA%93MySQL8-0%E3%80%8BStudy-Notes/","content":"\n\n第1章 开篇引导\n用SQL解决企业中存在的真实业务痛点问题；\n用SQL优化彰显你的个人价值\n\n\n\n\n\n\n\n第2章 【上帝视角】技术选型之数据库选型SQL（关系型数据库）\n常见的关系型数据库：MysQL、Oracle、SQLServer、PostGreSQL\n关系型数据库的特点：\n数据结构化存储在二维表中\n支持事务的原子性A,一致性C,隔离性I,持久性D 特性\n支持使用SQL语言对存储在其中的数据进行操作\n\n\n关系数据库的适用场景：\n数据之间存在着一定关系，需要关联查询数据的场景\n需要事务支持的业务场景\n需要使用SQL语言灵活操作数据的场景\n\n\n\n\n\n\n\nNoSQL（非关系型数据库概述）\n常见的非关系型数据库：HBase、MongoDB、Redis、Hadoop\n\n非关系数据库的特点\n\n存储结构灵活，没有固定的结构（在不考虑数据压缩的情况下，可能会占用更多的存储空间，因为存储了列名）\n对事务的支持比较弱，但对数据的并发处理性能高\n大多不使用SQL语言操作数据\n\n\n非关系数据库的适用场景\n\n数据结构不固定的场景\n对事务要求不高，但读写并发比较大的场景\n对数据的处理操作比较简单的场景\n\n\n\n\n\n\n\n关系数据库选型原则\n数据库使用的广泛性\nMySQL在数据库使用排行榜中名列前茅\n\n\n数据库的可扩展性\n支持基于二进制日志的逻辑复制\n存在多种第三方数据库中间层，支持读写分离及分库分表\n\n\n数据库的安全性和稳定性\nMySQL主从复制集群可达到99%的可用性\n配合主从复制高可用架构可以达到99.99%的可用性\n支持对存储在MySQL的数据进行分级安全控制\n\n\n数据库所支持的系统\n支持Liunx系统\n支持Windows系统\n\n\n数据库的使用成本\n社区版本免费\n使用人员众多，可以方便的获取技术支持\n\n\n\n\n\n\n\n构建MySQL开发环境（0）环境准备：CentOS7\n（1）MySQL下载、解压、创建软连接\ncd /usr/local/src/wget https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.15-linux-glibc2.12-x86_64.tar.xzxz -d mysql-8.0.15-linux-glibc2.12-x86_64.tar.xztar xf mysql-8.0.15-linux-glibc2.12-x86_64.tarmv /usr/local/src/mysql-8.0.15-linux-glibc2.12-x86_64 /usr/local/cd /usr/local/ln -s mysql-8.0.15-linux-glibc2.12-x86_64/ mysql\n\n\n\n（2）创建mysql专属用户（用于启动管理mysql），配置mysql的环境变量\nadduser mysql\n\n# 配置mysql的环境变量vim /etc/profileexport PATH=$JAVA_HOME/bin:/usr/local/mysql/bin:$PATHsource /etc/profile\n\n\n\n（3）配置mysql的配置文件my.cnf，创建数据目录并修改权限\nvim /etc/my.cnf\n\n[client]port            = 3306socket          = /usr/local/mysql/data/mysql.sock[mysqld]# Skip #skip_name_resolve              = 1skip_external_locking          = 1 skip_symbolic_links     = 1# GENERAL #user = mysqldefault_storage_engine = InnoDBcharacter-set-server = utf8socket  = /usr/local/mysql/data/mysql.sockpid_file = /usr/local/mysql/data/mysqld.pidbasedir = /usr/local/mysqlport = 3306bind-address = 0.0.0.0explicit_defaults_for_timestamp = offsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES#read_only=on# MyISAM #key_buffer_size                = 32M#myisam_recover                 = FORCE,BACKUP# undo log #innodb_undo_directory = /usr/local/mysql/undoinnodb_undo_tablespaces = 8# SAFETY #max_allowed_packet             = 100Mmax_connect_errors             = 1000000sysdate_is_now                 = 1#innodb = FORCE#innodb_strict_mode = 1secure-file-priv=&#x27;/tmp&#x27;default_authentication_plugin=&#x27;mysql_native_password&#x27;# Replice # server-id = 1001 relay_log = mysqld-relay-bin gtid_mode = on enforce-gtid-consistency log-slave-updates = on master_info_repository =TABLE relay_log_info_repository =TABLE# DATA STORAGE # datadir = /usr/local/mysql/data/ tmpdir = /tmp # BINARY LOGGING # log_bin = /usr/local/mysql/sql_log/mysql-bin max_binlog_size = 1000M binlog_format = row binlog_expire_logs_seconds=86400# sync_binlog = 1 # CACHES AND LIMITS # tmp_table_size                 = 32M max_heap_table_size            = 32M max_connections                = 4000 thread_cache_size              = 2048 open_files_limit               = 65535 table_definition_cache         = 4096 table_open_cache               = 4096 sort_buffer_size               = 2M read_buffer_size               = 2M read_rnd_buffer_size           = 2M# thread_concurrency             = 24 join_buffer_size = 1M# table_cache = 32768 thread_stack = 512k max_length_for_sort_data = 16k # INNODB # innodb_flush_method            = O_DIRECT innodb_log_buffer_size = 16M innodb_flush_log_at_trx_commit = 2 innodb_file_per_table          = 1 innodb_buffer_pool_size        = 256M #innodb_buffer_pool_instances = 8 innodb_stats_on_metadata = off innodb_open_files = 8192 innodb_read_io_threads = 16 innodb_write_io_threads = 16 innodb_io_capacity = 20000 innodb_thread_concurrency = 0 innodb_lock_wait_timeout = 60 innodb_old_blocks_time=1000 innodb_use_native_aio = 1 innodb_purge_threads=1 innodb_change_buffering=all innodb_log_file_size = 64M innodb_log_files_in_group = 2 innodb_data_file_path  = ibdata1:256M:autoextend  innodb_rollback_on_timeout=on # LOGGING # log_error                      = /usr/local/mysql/sql_log/mysql-error.log # log_queries_not_using_indexes  = 1 # slow_query_log                 = 1  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log # TimeOut # #interactive_timeout = 30 #wait_timeout        = 30 #net_read_timeout = 60[mysqldump]quickmax_allowed_packet = 100M[mysql]no-auto-rehash# Remove the next comment character if you are not familiar with SQL#safe-updates[myisamchk]key_buffer_size = 256Msort_buffer_size = 256Mread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout\n\ncd /usr/local/mysql# 创建需要的mysql目录，并改变属主、权限mkdir data sql_log undochown -R mysql.mysql data/ sql_log/ undo/\n\n\n\n（4）初始化mysql\n# 初始化mysql8mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/datacp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\n\n\n\n（5）启动mysql\n/etc/init.d/mysqld start\n\n\n\n（6）修改密码\n# 查看mysql的初始密码grep password /usr/local/mysql/sql_log/mysql-error.log# 修改mysql的初始密码mysql&gt; alter user user() identified by &#x27;root&#x27;;\n\n\n\n\n\n\n\n第3章 【设计师视角】关于数据库设计-程序猿必备技数据库设计范式\n第一范式：表中的所有字段都是不可再分的\n符合第一范式的表全部都是二维表\n\n\n第二范式：表中必须存在业务主键，并且非主键依赖于全部业务主键\n第二范式是在第一范式的基础上定义的（也就是说第二范式的表一定是一个标准的二维表）\n\n\n第三范式：表中的非主键列之间不能相互依赖\n第三范式是在第一、第二范式的基础上定义的\n\n\n\n\n\n\n\n\n\nReferences\n零基础入门 详解企业主流数据库MySQL8.0——从选型-设计-SQL开发-优化，一切为你在工作中能独当一面而设计\n\n","categories":["DataBase","MySQL"],"tags":["DataBase","MySQL"]},{"title":"《知数堂MySQL实战》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E7%9F%A5%E6%95%B0%E5%A0%82MySQL%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/","content":"\n\n开篇\n\n\n\n\n\nMySQL安装\n推荐使用二进制包安装\n源码编译安装不推荐，除非需要定制一些功能\n下载安装包一定要去官网下载\n\n\n\n\n\nLinux环境检查\n关闭numa\n限制设置 &#x2F;etc&#x2F;security&#x2F;limits.conf &amp; 网络优化\nSwap\nIO调度\n文件系统\nselinux &amp; iptables\n\n","categories":["DataBase","MySQL"],"tags":["DataBase","MySQL"]},{"title":"Hello World","url":"/dev.ratears.life/2023/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\n\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Hexo常用命令与核心配置","url":"/dev.ratears.life/2023/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/","content":"Hexo常用命令# 本地部署hexo并指定端口hexo -s [port]# 清理生成部署hexo clean &amp;&amp; hexo g -d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferencesEasy Hexo\n\n\n\n\n\n\n学习备注\n1\n\n&lt;font color=red&gt;&lt;/font&gt;&amp;emsp;&amp;emsp;\n\n\n\n"},{"title":"《高级Redis进阶课 解决Redis实际问题+掌握Redis6.x特性》Study Notes","url":"/dev.ratears.life/2023/%E3%80%8A%E9%AB%98%E7%BA%A7Redis%E8%BF%9B%E9%98%B6%E8%AF%BE-%E8%A7%A3%E5%86%B3Redis%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98-%E6%8E%8C%E6%8F%A1Redis6-x%E7%89%B9%E6%80%A7%E3%80%8BStudy-Notes/","content":"\n\n课程介绍\nRedis是目前使用非常广泛的中间件\n\n为何Redis经久不衰：\n\n功能强大：\n高性能：底层C语言编写，内存数据库，，通讯采用epoll非阻塞I&#x2F;O多路复用机制\n线程安全：原子操作、单线程\n功能丰富：\n数据结构：\n基本：String、List、HashSet、SortedSet\n高阶：GEO、BitMap、HyperLogLog\n\n\n持久化：RDB持久化、AOF持久化、RDB—AOF混合持久化\n主从：Master—Slave\n哨兵：Sentinel\n集群\n模块化：能够支撑很多的互联网应用场景，比如缓存、分布式锁队列、集合、GEO、BitMap操作等\n\n\n\n\n持续改进\n\n\n以项目，穿针引线（理论+实践）\n\n典型的业务场景\n丰富的数据类型\n新特性：多线程IO\n微服务与分布式\n\n\n\n\n\n\n项目架构\n单节点-&gt;主从-&gt;哨兵-&gt;集群\n\n\n\n\n\n\n课程内容概述（以问带学）\n项目系统搭建：SpringBoot整合Redis， SpringCloud搭建微服务\n系统响应慢：用最合适的数据类型来缓存，满日志，BigKey，连接池优化\n缓存异常：分布式锁，LRU淘汰算法，（缓存穿透，缓存击穿，缓存雪崩）\n数据丢失、不安全：RDB—AOF混合持久化，全量&#x2F;部分同步，主从复制数据一致性\n主从复制故障：哨兵监控，主观&#x2F;客观下线\n存储不够用：集群分片存储，集群内部原理，故障自动转移\n服务器宕机：集群动态收缩，MOVED&#x2F;ASK转向，故障演示与恢复方案\n\n\n\n​\t\n\n底层原理：\n网络底层\n事务处理\n持久化原理\n主从复制原理\n哨兵机制\n分片存储原理\n\n\n底层算法：\nSorted Set底层\nBitmap、Geo算法\n数据过期淘汰算法\nLeader选举流程\n槽位定位算法\n备份迁移及其算法\n\n\n性能提升方案：\nKey与Value设计规范\n避免BigKey\n避免耗时操作\nPipeline管道操作\n连接池性能优化\n子进程的开销与优化\n\n\n故障解决方案：\n数据延迟\n数据脏读\n数据抖动\n数据一致性\n热点数据存储\nRDB文件损坏\n\n\n\n\n\n\n\n\n\n第2章 Redis快速入门章节介绍\n[学习目标]\n\n1、了解Redis为什么能流行这么多年，高性能的原因2、掌握Redis环境安装以及配置3、了解微服务项目的构建以及SpringBoot开发\n\n[理论知识]\n\n1、缓存相关中间件 (Redis、 Memcache和Ehcache) 的比较2、对Redis的基本理解3、微服务相关概念\n\n[实际操作]\n\n1、Redis安装、配置以及启动2、Redis的基本命令3、数据库表结构设计4、SpringBoot&amp;SpringCloud项目搭建\n\n\n\n\nRedis介绍特点\n内存数据库，速度快，也支持数据的持久化\nRedis不仅仅支持简单的key-value类型的数据，同时还提供Lists、 Hashes、 Sets 、Sorted Sets 等多种数据结构的存储\nRedis支持数据的备份 (master-slave) 与集群 (分片存储)，以及拥有哨兵监控机制.\n支持事务\n\n优势\n性能极高 - Redis能读的速度是110000次&#x2F;s，写的速度是81000次&#x2F;s\n丰富的数据类型 - Redis支持 Strings、 Lists、 Hashes、Sets 、Sorted Sets 等数据类型操作\n原子操作 - Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行 (事务）\n丰富的特性 - Redis还支持 publish&#x2F;subscribe,通知,key 过期等特性。\n\nRedis、Memcached、 Ehcache的区别\n这三个中间件都可以应用于缓存，但目前市面上使用Redis的场景会更多，更广泛，其原因是: Redis性能高、原子操作、支持多种数据类型，主从复制与哨兵监控，持久化操作等。\n\n\n\n\n\n\n\nRedis的高并发\n官方的bench-mark数据: 测试完成了50个并发执行100000个请求。设置和获取的值是一个256字节字符串。结果: 读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s。redis尽量少写多读，符合缓存的适用要求。单机redis支撑万级，如果10万+可以采用主从复制的模式。\n\n原理\nRedis是纯内存数据库，所以读取速度快。\nRedis使用的是非阻塞10，10多路复用，减少了线程切换时上下文的切换和竞争\nRedis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争\nRedis存储结构多样化，不同的数据结构对数据存储进行了优化加快读取的速度\nRedis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大\n\nRedis的单线程原因\n\n不需要各种锁的性能消耗\n单线程多进程集群方案\nCPU消耗\n\n优劣\n\n单进程单线程优势\n代码更清晰，处理逻辑更简单\n不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗\n不存在多进程或者多线程导致的切换而消耗CPU\n\n\n单进程单线程弊端\n无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善\n\n\n\n\n\nI&#x2F;O多路复用技术\nredis 采用网络I&#x2F;O多路复用技术来保证在多连接的时候，系统的高吞吐量。\n\n\n\n\n\nRedis版本说明\nRedis2.6\n键的过期时间支持毫秒\n从节点支持只读功能\n\n\nRedis2.8\n可以用bind命令绑定多个IP地址\n发布订阅添加了pub&#x2F;sub\nRedis Sentinel第二版，相比于Redis2.6的Redis Sentinel，此版本已经变成生产可用\n\n\nRedis3.0 (里程碑)\nRedis最大的改动就是添加Redis的分布式实现Redis cluster。\n\n\nRedis3.2\n添加GEO相关功能。\n新的List编码类型: quicklist。\n\n\nRedis4.0 (重大改版)\n提供了模块系统，方便第三方开发者拓展Redis的功能\n提供了新的缓存剔除算法: LFU (Last Frequently Used)，并对已有算法进行了优化\n提供了非阻塞del和flushall&#x2F;flushdb功能，有效解决删除了bigkey可能造成的Redis阻塞.\n提供了RDB-AOF混合持久化格式，充分利用了AOF和RDB各自优势。\n\n\nRedis5.0\n新的stream数据类型\n客户经常连接和断开连接时性能更好\n\n\nRedis6.0\n多线程I&#x2F;O。多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程\n\n\n\n\n\n\n\nRedis安装\n下载解压\n\nwget -P /usr/local/src/ https://download.redis.io/releases/redis-6.0.9.tar.gzcd /usr/local/src/tar -zxvf redis-6.0.9.tar.gz\n\n\n确保环境依赖（升级 GCC）\n\n\n在编译 Redis 6 之前需要升级 gc 的版本，默认情况 yum 安装的 gcc 版本是 4.8.5，由于版本过低，在编译时会报如下错误。所以我们需要执行以下操作升级 GCC。\n\n# 安装 Sc1 源yum install -y centos-release-scl scl-utils-build# 安装 9 版本的 gcc、gcc-c++、gdb 工具链 (toolchian)yum install -y devtoolset-9-toolchain# 临时覆盖系统原有的 gcc 引用scl enable devtoolset-9 bash# 查看 gcc 当前版本gcc -v\n\n\n预编译\n\ncd /usr/local/src/redis-6.0.9/make\n\n\n安装\n\nmkdir -p /usr/local/redis-6.0.9cd /usr/local/src/redis-6.0.9/make PREFIX=/usr/local/redis-6.0.9 install\n\n\n创建软连接\n\ncd /usr/local/ln -s redis-6.0.9/ redis\n\n\n\n\n\nRedis的启动\n前台启动\n\ncd /usr/local/redisbin/redis-server\n\n\n后台启动\n\ncp /usr/local/src/redis-6.0.9/redis.conf /usr/local/redis/bin/cd /usr/local/redis/bin/vim redis.conf# 修改以守护进程方式启动daemonize yes# 使用配置文件，后台启动cd /usr/local/redis/bin/./redis-server redis.conf\n\n\n配置开机启动 (centos7及以上)\n\n# 在系统服务目录里创建redis.service文件vim /etc/systemd/system/redis.service\n\n# 写入以下内容:[Unit]Description=redis-serverAfter=network.target[Service]Type=forkingExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.confPrivateTmp=true[Install]WantedBy=multi-user.target\n\n# 重载系统服务systemctl daemon-reload# 关闭redis-server: systemctl stop redis.servicesystemctl start redis.servicesystemctl status redis.service# 开启成功，将服务加入开机自启systemctl enable redis.service\n\n\n\n\n\nRedis 的配置\ndaemonize默认情况下，redis 不是在后台运行的，如果需要在后台运行，把该项的值更改为 yes\nbind指定 Redis 只接收来自于该IP 地址的请求\nport监听端口，默认为 6379\ndatabases设置数据库的个数，默认使用的数据库是0\nsave设置 Redis 进行数据库镜像的频率\ndbfilename镜像备份文件的文件名\ndir数据库镜像备份的文件放置的路径\nrequirepass设置客户端连接后进行任何其他指定前需要使用的密码\nmaxclients限制同时连接的客户数量\nmaxmemory设置redis 能够使用的最大内存\n\n\n\n\n\nRedis的客户端Windows 客户端\nredis-desktop-manager\n\nRedis 自带的客户端./redis-cli -a [password]\nJava 客户端\nRedis的Java客户端也有很多: https://redis,io/clients#java，其中比较受欢迎的是Jedis和Lettuce.\nJedis在实现上是直接连接的redis server，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个Jedis实例增加物理连接，官方推荐。\nLettuce的连接是基于Netty的，连接实例 (StatefulRedisConnection)可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例 (StatefulRedisConnection) 就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。\n在SpringBoot Data Redis 1.X之前默认使用的是Jedis，但目前最新版的修改成了Lettuce。\n之前公司使用Jedis居多，Letuce近两年在逐步上升，总的来进Jedis的性能会优于Lettuce (因为它是直接操作Redis)\n\nJedis 直连import org.junit.After;import org.junit.Before;import org.junit.Test;import redis.clients.jedis.Jedis;public class JedisTests &#123;    private Jedis jedis = null;    //建立连接    @Before    public void init() &#123;        // 初始化 Jedis 客户端，声明主机和端口        jedis = new Jedis(&quot;117.50.197.120&quot;,6379);        // 心跳机制检测是否连接成功        jedis.auth(&quot;redis&quot;);        String pong = jedis.ping();        System.out.println(pong);    &#125;    @Test    public void test1()&#123;        // 选择/切换数据库        String select = jedis.select(3);        System.out.println(&quot;select = &quot; + select);        // 插入一条数据        String result = jedis.set(&quot;name&quot;, &quot;MIKE&quot;);        System.out.println(&quot;result = &quot; + result);        // 获取一条数据        String name = jedis.get(&quot;name&quot;);        System.out.println(&quot;name = &quot; + name);    &#125;    //释放资源    @After    public void after() &#123;        if (null != jedis) &#123;            jedis.close();        &#125;    &#125;&#125;\n\n\n\nJedis 连接池import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;public class JedisPoolConnectRedis &#123;    private static JedisPool jedisPool;    static &#123;        // 创建连接池配置对象        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();        //设置最大连接数，默认 8        jedisPoolConfig.setMaxTotal(5);       // 设置最大空闲数量，默认 8        jedisPoolConfig.setMaxIdle(5);        //设置最少空闲数量，默认 0        jedisPoolConfig.setMinIdle(5);        //设置等待时间ms        jedisPoolConfig.setMaxWaitMillis(100);        //初始化 JedisPool 对象        jedisPool = new JedisPool(jedisPoolConfig,&quot;117.50.197.120&quot;,6379,100,&quot;redis&quot;);    &#125;    /**     * 获取 Jedis 对象     * @return     */    public static Jedis getJedis() &#123;        return jedisPool.getResource();    &#125;&#125;\n\n\n\nSpringBoot 集成 Redis\n使用脚手架引入相关依赖\n配置Redis\n添加Redis序列化方法\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;@SpringBootApplicationpublic class SpringdataDemoApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(SpringdataDemoApplication.class, args);    &#125;    /**     * 自定义RedisTemplate的bean，不使用默认的RedisTemplate     * redisTemplate 默认序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类     * @param redisConnectionFactory     * @return     */    @Bean    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)&#123;        RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();        redisTemplate.setConnectionFactory(redisConnectionFactory);        // 使用Jackson2JsonRedisSerialize 替换默认序列化        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper objectMapper = new ObjectMapper();        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);        // 设置value的序列化规则和 key的序列化规则        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);        redisTemplate.setKeySerializer(new StringRedisSerializer());        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);        redisTemplate.afterPropertiesSet();        return redisTemplate;    &#125;&#125;\n\nimport org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;@SpringBootTest(classes = &#123;SpringdataDemoApplication.class&#125;)class SpringdataDemoApplicationTests &#123;    @Autowired    protected RedisTemplate redisTemplate;    @Test    void testInit() &#123;        // PING PONG 心跳机制检测是否连接成功        String pong = redisTemplate.getConnectionFactory().getConnection().ping();        System.out.println(&quot;pong = &quot; + pong);    &#125;    @Test    void testString() &#123;        // 测试，插入一条数据        redisTemplate.opsForValue().set(&quot;username&quot;,&quot;zhangsan&quot;);        Object username = redisTemplate.opsForValue().get(&quot;username&quot;);        System.out.println(&quot;username = &quot; + username);    &#125;&#125;\n\n\n\n\n\n需求分析与数据库设计项目架构\n基于微服务进行项目开发，微服务是目前比较热门的架构方式，具有以下特点:\n职责单一: 理论上一个微服务只解决一件事 (小)\n隔离性强:服务单独部署，服务之间互相隔离，互不影响，因此一个服务宕机并不影响其他服务运行。 (松)\n开发简单:一个微服务解决一件事情，那么对开发团队的要求相对就减少(不论从人数还是开发语言都可以随心所欲)，能够快速提高开发效率。 (便)\n\n\n本课程以美食社交APP后台API接口设计为例。涉及APP中用户、好友、订单为基础的相关业务，分为用户、好友、排行榜、优惠券&#x2F;秒杀、订单、附近的人、Feed 等微服务。完成用户登录、交友、发朋友圈以及购买优惠券、下单整个业务流程，并实现积分排行榜以及附近的人等相关功能。\n\n\n\n\n\n数据库设计/* Navicat Premium Data Transfer Source Server         : localhost Source Server Type    : MySQL Source Server Version : 80018 Source Host           : localhost:3306 Source Schema         : db_imooc Target Server Type    : MySQL Target Server Version : 80018 File Encoding         : 65001 Date: 14/11/2020 19:06:41*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for t_dictionary-- ----------------------------DROP TABLE IF EXISTS `t_dictionary`;CREATE TABLE `t_dictionary`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `data` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `display_order` int(11) NULL DEFAULT 0,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 415 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_dictionary-- ----------------------------INSERT INTO `t_dictionary` VALUES (1, &#x27;TableType           &#x27;, &#x27;Regular|大厅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (2, &#x27;TableType           &#x27;, &#x27;Bar|吧台&#x27;, 0);INSERT INTO `t_dictionary` VALUES (3, &#x27;TableType           &#x27;, &#x27;Window|靠窗&#x27;, 0);INSERT INTO `t_dictionary` VALUES (4, &#x27;TableType           &#x27;, &#x27;Outdoor|户外&#x27;, 0);INSERT INTO `t_dictionary` VALUES (5, &#x27;TableType           &#x27;, &#x27;Private|包间&#x27;, 0);INSERT INTO `t_dictionary` VALUES (7, &#x27;RestaurantTag       &#x27;, &#x27;24|hours|24小时营业&#x27;, 0);INSERT INTO `t_dictionary` VALUES (8, &#x27;RestaurantTag       &#x27;, &#x27;Afternoon|tea|下午茶&#x27;, 0);INSERT INTO `t_dictionary` VALUES (9, &#x27;RestaurantTag       &#x27;, &#x27;All|you|can|eat|自助餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (10, &#x27;RestaurantTag       &#x27;, &#x27;Bistros|酒馆&#x27;, 0);INSERT INTO `t_dictionary` VALUES (11, &#x27;RestaurantTag       &#x27;, &#x27;Breakfast|早餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (12, &#x27;RestaurantTag       &#x27;, &#x27;Bund|view|外滩风景&#x27;, 0);INSERT INTO `t_dictionary` VALUES (13, &#x27;RestaurantTag       &#x27;, &#x27;Classic|Shanghai|老上海&#x27;, 0);INSERT INTO `t_dictionary` VALUES (14, &#x27;RestaurantTag       &#x27;, &#x27;Cocktails|鸡尾酒&#x27;, 0);INSERT INTO `t_dictionary` VALUES (15, &#x27;RestaurantTag       &#x27;, &#x27;Credit|cards|accepted|可刷卡&#x27;, 0);INSERT INTO `t_dictionary` VALUES (16, &#x27;RestaurantTag       &#x27;, &#x27;Delivery|可送外卖&#x27;, 0);INSERT INTO `t_dictionary` VALUES (17, &#x27;RestaurantTag       &#x27;, &#x27;Pet|friendly|宠物友好&#x27;, 0);INSERT INTO `t_dictionary` VALUES (18, &#x27;RestaurantTag       &#x27;, &#x27;Kids|friendly||适合小孩&#x27;, 0);INSERT INTO `t_dictionary` VALUES (19, &#x27;RestaurantTag       &#x27;, &#x27;Fine|dining|顶级餐厅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (20, &#x27;RestaurantTag       &#x27;, &#x27;Free|parking|免费停车&#x27;, 0);INSERT INTO `t_dictionary` VALUES (21, &#x27;RestaurantTag       &#x27;, &#x27;Lounge|酒廊&#x27;, 0);INSERT INTO `t_dictionary` VALUES (22, &#x27;RestaurantTag       &#x27;, &#x27;Lunch|set|午市套餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (23, &#x27;RestaurantTag       &#x27;, &#x27;Group|dining|团体&#x27;, 0);INSERT INTO `t_dictionary` VALUES (24, &#x27;RestaurantTag       &#x27;, &#x27;Healthy|健康&#x27;, 0);INSERT INTO `t_dictionary` VALUES (25, &#x27;RestaurantTag       &#x27;, &#x27;Historic|building|历史建筑&#x27;, 0);INSERT INTO `t_dictionary` VALUES (26, &#x27;RestaurantTag       &#x27;, &#x27;Hotel|restaurant||酒店餐厅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (27, &#x27;RestaurantTag       &#x27;, &#x27;Ice|cream|冰激凌&#x27;, 0);INSERT INTO `t_dictionary` VALUES (28, &#x27;RestaurantTag       &#x27;, &#x27;Late|night|dining|夜宵&#x27;, 0);INSERT INTO `t_dictionary` VALUES (29, &#x27;RestaurantTag       &#x27;, &#x27;Non-smoking|有无烟区&#x27;, 0);INSERT INTO `t_dictionary` VALUES (30, &#x27;RestaurantTag       &#x27;, &#x27;Notable|wine|list|葡萄酒&#x27;, 0);INSERT INTO `t_dictionary` VALUES (32, &#x27;RestaurantTag       &#x27;, &#x27;Outdoor|seating|户外餐桌&#x27;, 0);INSERT INTO `t_dictionary` VALUES (33, &#x27;RestaurantTag       &#x27;, &#x27;Performance|现场表演&#x27;, 0);INSERT INTO `t_dictionary` VALUES (34, &#x27;RestaurantTag       &#x27;, &#x27;Romantic||浪漫&#x27;, 0);INSERT INTO `t_dictionary` VALUES (35, &#x27;RestaurantTag       &#x27;, &#x27;Ramen|日式拉面&#x27;, 0);INSERT INTO `t_dictionary` VALUES (36, &#x27;RestaurantTag       &#x27;, &#x27;Salads|沙拉&#x27;, 0);INSERT INTO `t_dictionary` VALUES (37, &#x27;RestaurantTag       &#x27;, &#x27;Sandwiches &amp; Delis|三明治&amp;熟食&#x27;, 0);INSERT INTO `t_dictionary` VALUES (38, &#x27;RestaurantTag       &#x27;, &#x27;Smoothies|冰沙&#x27;, 0);INSERT INTO `t_dictionary` VALUES (39, &#x27;RestaurantTag       &#x27;, &#x27;Tapas|西班牙小吃&#x27;, 0);INSERT INTO `t_dictionary` VALUES (40, &#x27;RestaurantTag       &#x27;, &#x27;Themed|restaurant|主题餐厅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (41, &#x27;RestaurantTag       &#x27;, &#x27;Villa|别墅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (43, &#x27;Cuisine             &#x27;, &#x27;American|北美菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (45, &#x27;Cuisine             &#x27;, &#x27;Australian|澳洲菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (48, &#x27;Cuisine             &#x27;, &#x27;Barbecue|烧烤&#x27;, 0);INSERT INTO `t_dictionary` VALUES (50, &#x27;Cuisine             &#x27;, &#x27;Beijing|京菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (63, &#x27;Cuisine             &#x27;, &#x27;Dongbei|东北菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (65, &#x27;Cuisine             &#x27;, &#x27;Hunan|湘菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (68, &#x27;Cuisine             &#x27;, &#x27;French|法国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (70, &#x27;Cuisine             &#x27;, &#x27;Fusion|创意菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (71, &#x27;Cuisine             &#x27;, &#x27;German|德国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (72, &#x27;Cuisine             &#x27;, &#x27;Grocery|杂货&#x27;, 0);INSERT INTO `t_dictionary` VALUES (73, &#x27;Cuisine             &#x27;, &#x27;Halal|清真&#x27;, 0);INSERT INTO `t_dictionary` VALUES (76, &#x27;Cuisine             &#x27;, &#x27;Hot Pot|火锅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (79, &#x27;Cuisine             &#x27;, &#x27;Indian|印度菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (80, &#x27;Cuisine             &#x27;, &#x27;Indonesian|印尼菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (81, &#x27;Cuisine             &#x27;, &#x27;Italian|意大利菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (82, &#x27;Cuisine             &#x27;, &#x27;Japanese|日本料理&#x27;, 0);INSERT INTO `t_dictionary` VALUES (84, &#x27;Cuisine             &#x27;, &#x27;Jiangxi|赣菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (88, &#x27;Cuisine             &#x27;, &#x27;Malaysian|马来西亚菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (91, &#x27;Cuisine             &#x27;, &#x27;Mediterranean|地中海菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (92, &#x27;Cuisine             &#x27;, &#x27;Mexican / Tex-Mex|墨西哥菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (94, &#x27;Cuisine             &#x27;, &#x27;Other|其他&#x27;, 0);INSERT INTO `t_dictionary` VALUES (102, &#x27;Cuisine             &#x27;, &#x27;Portuguese|葡国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (103, &#x27;Cuisine             &#x27;, &#x27;Russian|俄国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (104, &#x27;Cuisine             &#x27;, &#x27;Sandwiches &amp; Delis|三明治&amp;简食&#x27;, 0);INSERT INTO `t_dictionary` VALUES (107, &#x27;Cuisine             &#x27;, &#x27;Shaoxing|绍兴菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (111, &#x27;Cuisine             &#x27;, &#x27;Shanghainese|上海菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (112, &#x27;Cuisine             &#x27;, &#x27;Singaporean|新加坡菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (113, &#x27;Cuisine             &#x27;, &#x27;South American|南美菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (114, &#x27;Cuisine             &#x27;, &#x27;Spanish|西班牙菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (115, &#x27;Cuisine             &#x27;, &#x27;Steakhouse|牛排店&#x27;, 0);INSERT INTO `t_dictionary` VALUES (117, &#x27;Cuisine             &#x27;, &#x27;Taiwanese|台湾菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (118, &#x27;Cuisine             &#x27;, &#x27;Thai|泰国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (121, &#x27;Cuisine             &#x27;, &#x27;Turkish|土耳其菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (122, &#x27;Cuisine             &#x27;, &#x27;Vegetarian|素食&#x27;, 0);INSERT INTO `t_dictionary` VALUES (123, &#x27;Cuisine             &#x27;, &#x27;Vietnamese|越南菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (124, &#x27;Cuisine             &#x27;, &#x27;Wine Bar|红酒吧&#x27;, 0);INSERT INTO `t_dictionary` VALUES (126, &#x27;Cuisine             &#x27;, &#x27;Yunnan|云南菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (129, &#x27;Cuisine             &#x27;, &#x27;Zhejiang|浙菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (130, &#x27;nations             &#x27;, &#x27;Afghanistan | 阿富汗&#x27;, 0);INSERT INTO `t_dictionary` VALUES (131, &#x27;nations             &#x27;, &#x27;Albania | 阿尔巴尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (132, &#x27;nations             &#x27;, &#x27;Algeria | 阿尔及利亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (133, &#x27;nations             &#x27;, &#x27;Andorra | 安道尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (134, &#x27;nations             &#x27;, &#x27;Angola | 安哥拉&#x27;, 0);INSERT INTO `t_dictionary` VALUES (135, &#x27;nations             &#x27;, &#x27;Argentina | 阿根廷&#x27;, 0);INSERT INTO `t_dictionary` VALUES (136, &#x27;nations             &#x27;, &#x27;Armenia | 亚美尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (137, &#x27;nations             &#x27;, &#x27;Australia | 澳大利亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (138, &#x27;nations             &#x27;, &#x27;Austria | 奥地利&#x27;, 0);INSERT INTO `t_dictionary` VALUES (139, &#x27;nations             &#x27;, &#x27;Azerbaijan | 阿塞拜疆&#x27;, 0);INSERT INTO `t_dictionary` VALUES (140, &#x27;nations             &#x27;, &#x27;Bahamas | 巴哈马&#x27;, 0);INSERT INTO `t_dictionary` VALUES (141, &#x27;nations             &#x27;, &#x27;Bahrain | 巴林&#x27;, 0);INSERT INTO `t_dictionary` VALUES (142, &#x27;nations             &#x27;, &#x27;Bangladesh | 孟加拉国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (143, &#x27;nations             &#x27;, &#x27;Barbados | 巴巴多斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (144, &#x27;nations             &#x27;, &#x27;Belarus | 白俄罗斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (145, &#x27;nations             &#x27;, &#x27;Belgium | 比利时&#x27;, 0);INSERT INTO `t_dictionary` VALUES (146, &#x27;nations             &#x27;, &#x27;Belize | 伯利兹&#x27;, 0);INSERT INTO `t_dictionary` VALUES (147, &#x27;nations             &#x27;, &#x27;Benin | 柏林&#x27;, 0);INSERT INTO `t_dictionary` VALUES (148, &#x27;nations             &#x27;, &#x27;Bhutan | 不丹&#x27;, 0);INSERT INTO `t_dictionary` VALUES (149, &#x27;nations             &#x27;, &#x27;Bolivia | 玻利维亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (150, &#x27;nations             &#x27;, &#x27;Bosnia-Herzegovina | 波斯尼亚和黑塞哥维那&#x27;, 0);INSERT INTO `t_dictionary` VALUES (151, &#x27;nations             &#x27;, &#x27;Botswana | 博茨瓦纳&#x27;, 0);INSERT INTO `t_dictionary` VALUES (152, &#x27;nations             &#x27;, &#x27;Brazil | 巴西&#x27;, 0);INSERT INTO `t_dictionary` VALUES (154, &#x27;nations             &#x27;, &#x27;Brunei | 文莱&#x27;, 0);INSERT INTO `t_dictionary` VALUES (155, &#x27;nations             &#x27;, &#x27;Bulgaria | 保加利亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (156, &#x27;nations             &#x27;, &#x27;Burkina | 布基纳法索&#x27;, 0);INSERT INTO `t_dictionary` VALUES (157, &#x27;nations             &#x27;, &#x27;Burma (Myanmar) | 缅甸&#x27;, 0);INSERT INTO `t_dictionary` VALUES (158, &#x27;nations             &#x27;, &#x27;Burundi | 布隆迪&#x27;, 0);INSERT INTO `t_dictionary` VALUES (159, &#x27;nations             &#x27;, &#x27;Cambodia | 柬埔寨&#x27;, 0);INSERT INTO `t_dictionary` VALUES (160, &#x27;nations             &#x27;, &#x27;Cameroon | 喀麦隆&#x27;, 0);INSERT INTO `t_dictionary` VALUES (161, &#x27;nations             &#x27;, &#x27;Canada | 加拿大&#x27;, 0);INSERT INTO `t_dictionary` VALUES (162, &#x27;nations             &#x27;, &#x27;Cape Verde Islands | 佛得角群岛&#x27;, 0);INSERT INTO `t_dictionary` VALUES (163, &#x27;nations             &#x27;, &#x27;Chad | 乍得&#x27;, 0);INSERT INTO `t_dictionary` VALUES (164, &#x27;nations             &#x27;, &#x27;Chile | 智利&#x27;, 0);INSERT INTO `t_dictionary` VALUES (166, &#x27;nations             &#x27;, &#x27;Colombia | 哥伦比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (167, &#x27;nations             &#x27;, &#x27;Congo | 刚果&#x27;, 0);INSERT INTO `t_dictionary` VALUES (168, &#x27;nations             &#x27;, &#x27;Costa Rica | 哥斯达黎加&#x27;, 0);INSERT INTO `t_dictionary` VALUES (169, &#x27;nations             &#x27;, &#x27;Croatia | 克罗地亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (170, &#x27;nations             &#x27;, &#x27;Cuba | 古巴&#x27;, 0);INSERT INTO `t_dictionary` VALUES (171, &#x27;nations             &#x27;, &#x27;Cyprus | 塞浦路斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (172, &#x27;nations             &#x27;, &#x27;Czech Republic | 捷克共和国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (173, &#x27;nations             &#x27;, &#x27;Denmark | 丹麦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (174, &#x27;nations             &#x27;, &#x27;Djibouti | 吉布提&#x27;, 0);INSERT INTO `t_dictionary` VALUES (175, &#x27;nations             &#x27;, &#x27;Dominica | 多米尼加&#x27;, 0);INSERT INTO `t_dictionary` VALUES (176, &#x27;nations             &#x27;, &#x27;Dominican Republic | 多米尼加国共和国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (177, &#x27;nations             &#x27;, &#x27;Ecuador | 厄瓜多尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (178, &#x27;nations             &#x27;, &#x27;Egypt | 埃及&#x27;, 0);INSERT INTO `t_dictionary` VALUES (179, &#x27;nations             &#x27;, &#x27;El Salvador | 萨尔瓦多&#x27;, 0);INSERT INTO `t_dictionary` VALUES (180, &#x27;nations             &#x27;, &#x27;England | 英格兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (181, &#x27;nations             &#x27;, &#x27;Eritrea | 厄立特里亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (182, &#x27;nations             &#x27;, &#x27;Estonia | 爱沙尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (183, &#x27;nations             &#x27;, &#x27;Ethiopia | 埃塞俄比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (184, &#x27;nations             &#x27;, &#x27;Fiji | 斐济&#x27;, 0);INSERT INTO `t_dictionary` VALUES (185, &#x27;nations             &#x27;, &#x27;Finland | 芬兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (186, &#x27;nations             &#x27;, &#x27;France | 法国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (187, &#x27;nations             &#x27;, &#x27;Gabon | 加蓬&#x27;, 0);INSERT INTO `t_dictionary` VALUES (188, &#x27;nations             &#x27;, &#x27;Gambia | 冈比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (189, &#x27;nations             &#x27;, &#x27;Georgia | 格鲁吉亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (190, &#x27;nations             &#x27;, &#x27;Germany | 德国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (191, &#x27;nations             &#x27;, &#x27;Ghana | 加纳&#x27;, 0);INSERT INTO `t_dictionary` VALUES (192, &#x27;nations             &#x27;, &#x27;Greece | 希腊&#x27;, 0);INSERT INTO `t_dictionary` VALUES (193, &#x27;nations             &#x27;, &#x27;Grenada | 格林纳达&#x27;, 0);INSERT INTO `t_dictionary` VALUES (194, &#x27;nations             &#x27;, &#x27;Guatemala | 危地马拉&#x27;, 0);INSERT INTO `t_dictionary` VALUES (195, &#x27;nations             &#x27;, &#x27;Guinea | 几内亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (196, &#x27;nations             &#x27;, &#x27;Guyana | 圭亚那&#x27;, 0);INSERT INTO `t_dictionary` VALUES (197, &#x27;nations             &#x27;, &#x27;Haiti | 海地&#x27;, 0);INSERT INTO `t_dictionary` VALUES (198, &#x27;nations             &#x27;, &#x27;Netherlands | 荷兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (199, &#x27;nations             &#x27;, &#x27;Honduras | 洪都拉斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (200, &#x27;nations             &#x27;, &#x27;Hungary | 匈牙利&#x27;, 0);INSERT INTO `t_dictionary` VALUES (201, &#x27;nations             &#x27;, &#x27;Iceland | 冰岛&#x27;, 0);INSERT INTO `t_dictionary` VALUES (202, &#x27;nations             &#x27;, &#x27;India | 印度&#x27;, 0);INSERT INTO `t_dictionary` VALUES (203, &#x27;nations             &#x27;, &#x27;Indonesia | 印度尼西亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (204, &#x27;nations             &#x27;, &#x27;Iran | 伊朗&#x27;, 0);INSERT INTO `t_dictionary` VALUES (205, &#x27;nations             &#x27;, &#x27;Iraq | 伊拉克&#x27;, 0);INSERT INTO `t_dictionary` VALUES (206, &#x27;nations             &#x27;, &#x27;Ireland | 爱尔兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (207, &#x27;nations             &#x27;, &#x27;Italy | 意大利&#x27;, 0);INSERT INTO `t_dictionary` VALUES (208, &#x27;nations             &#x27;, &#x27;Jamaica | 牙买加&#x27;, 0);INSERT INTO `t_dictionary` VALUES (209, &#x27;nations             &#x27;, &#x27;Japan | 日本&#x27;, 0);INSERT INTO `t_dictionary` VALUES (210, &#x27;nations             &#x27;, &#x27;Jordan | 约旦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (211, &#x27;nations             &#x27;, &#x27;Kazakhstan | 哈萨克斯坦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (212, &#x27;nations             &#x27;, &#x27;Kenya | 肯尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (213, &#x27;nations             &#x27;, &#x27;Kuwait | 科威特&#x27;, 0);INSERT INTO `t_dictionary` VALUES (214, &#x27;nations             &#x27;, &#x27;Laos | 老挝&#x27;, 0);INSERT INTO `t_dictionary` VALUES (215, &#x27;nations             &#x27;, &#x27;Latvia | 拉脱维亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (216, &#x27;nations             &#x27;, &#x27;Lebanon | 黎巴嫩&#x27;, 0);INSERT INTO `t_dictionary` VALUES (217, &#x27;nations             &#x27;, &#x27;Liberia | 利比里亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (218, &#x27;nations             &#x27;, &#x27;Libya | 利比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (219, &#x27;nations             &#x27;, &#x27;Liechtenstein | 列支敦士登&#x27;, 0);INSERT INTO `t_dictionary` VALUES (220, &#x27;nations             &#x27;, &#x27;Lithuania | 立陶宛&#x27;, 0);INSERT INTO `t_dictionary` VALUES (221, &#x27;nations             &#x27;, &#x27;Luxembourg | 卢森堡&#x27;, 0);INSERT INTO `t_dictionary` VALUES (222, &#x27;nations             &#x27;, &#x27;Macedonia马其顿&#x27;, 0);INSERT INTO `t_dictionary` VALUES (223, &#x27;nations             &#x27;, &#x27;Madagascar | 马达加斯加&#x27;, 0);INSERT INTO `t_dictionary` VALUES (224, &#x27;nations             &#x27;, &#x27;Malawi | 马拉维&#x27;, 0);INSERT INTO `t_dictionary` VALUES (225, &#x27;nations             &#x27;, &#x27;Malaysia | 马来西亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (226, &#x27;nations             &#x27;, &#x27;Maldives | 马尔代夫&#x27;, 0);INSERT INTO `t_dictionary` VALUES (227, &#x27;nations             &#x27;, &#x27;Mali | 马里&#x27;, 0);INSERT INTO `t_dictionary` VALUES (228, &#x27;nations             &#x27;, &#x27;Malta | 马耳他&#x27;, 0);INSERT INTO `t_dictionary` VALUES (229, &#x27;nations             &#x27;, &#x27;Mauritania | 毛里塔尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (230, &#x27;nations             &#x27;, &#x27;Mauritius | 毛里求斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (231, &#x27;nations             &#x27;, &#x27;Mexico | 墨西哥&#x27;, 0);INSERT INTO `t_dictionary` VALUES (232, &#x27;nations             &#x27;, &#x27;Moldova | 摩尔多瓦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (233, &#x27;nations             &#x27;, &#x27;Monaco | 摩纳哥&#x27;, 0);INSERT INTO `t_dictionary` VALUES (234, &#x27;nations             &#x27;, &#x27;Mongolia | 蒙古&#x27;, 0);INSERT INTO `t_dictionary` VALUES (235, &#x27;nations             &#x27;, &#x27;Montenegro | 黑山&#x27;, 0);INSERT INTO `t_dictionary` VALUES (236, &#x27;nations             &#x27;, &#x27;Morocco | 摩洛哥&#x27;, 0);INSERT INTO `t_dictionary` VALUES (237, &#x27;nations             &#x27;, &#x27;Mozambique | 莫桑比克&#x27;, 0);INSERT INTO `t_dictionary` VALUES (239, &#x27;nations             &#x27;, &#x27;Namibia | 纳米比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (240, &#x27;nations             &#x27;, &#x27;Nepal | 尼泊尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (242, &#x27;nations             &#x27;, &#x27;New Zealand | 新西兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (243, &#x27;nations             &#x27;, &#x27;Nicaragua | 尼加拉瓜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (244, &#x27;nations             &#x27;, &#x27;Niger | 尼日尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (245, &#x27;nations             &#x27;, &#x27;Nigeria | 尼日利亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (246, &#x27;nations             &#x27;, &#x27;North Korea | 朝鲜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (247, &#x27;nations             &#x27;, &#x27;Norway | 挪威&#x27;, 0);INSERT INTO `t_dictionary` VALUES (248, &#x27;nations             &#x27;, &#x27;Oman | 阿曼&#x27;, 0);INSERT INTO `t_dictionary` VALUES (249, &#x27;nations             &#x27;, &#x27;Pakistan | 巴基斯坦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (250, &#x27;nations             &#x27;, &#x27;Panama | 巴拿马&#x27;, 0);INSERT INTO `t_dictionary` VALUES (251, &#x27;nations             &#x27;, &#x27;Papua New Guinea | 巴布亚新几内亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (252, &#x27;nations             &#x27;, &#x27;Paraguay | 巴拉圭&#x27;, 0);INSERT INTO `t_dictionary` VALUES (253, &#x27;nations             &#x27;, &#x27;Peru | 秘鲁&#x27;, 0);INSERT INTO `t_dictionary` VALUES (254, &#x27;nations             &#x27;, &#x27;Philippines | 菲律宾&#x27;, 0);INSERT INTO `t_dictionary` VALUES (255, &#x27;nations             &#x27;, &#x27;Poland | 波兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (256, &#x27;nations             &#x27;, &#x27;Portugal | 葡萄牙&#x27;, 0);INSERT INTO `t_dictionary` VALUES (257, &#x27;nations             &#x27;, &#x27;Qatar | 卡塔尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (258, &#x27;nations             &#x27;, &#x27;Romania | 罗马尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (259, &#x27;nations             &#x27;, &#x27;Russia | 俄罗斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (260, &#x27;nations             &#x27;, &#x27;Rwanda | 卢旺达&#x27;, 0);INSERT INTO `t_dictionary` VALUES (261, &#x27;nations             &#x27;, &#x27;Saudi Arabia | 沙特阿拉伯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (262, &#x27;nations             &#x27;, &#x27;Scotland | 苏格兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (263, &#x27;nations             &#x27;, &#x27;Senegal | 塞内加尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (264, &#x27;nations             &#x27;, &#x27;Serbia | 塞尔维亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (265, &#x27;nations             &#x27;, &#x27;Seychelles | 塞舌尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (266, &#x27;nations             &#x27;, &#x27;Sierra Leone | 塞拉里昂&#x27;, 0);INSERT INTO `t_dictionary` VALUES (267, &#x27;nations             &#x27;, &#x27;Singapore | 新加坡&#x27;, 0);INSERT INTO `t_dictionary` VALUES (268, &#x27;nations             &#x27;, &#x27;Slovakia | 斯洛伐克&#x27;, 0);INSERT INTO `t_dictionary` VALUES (269, &#x27;nations             &#x27;, &#x27;Slovenia | 斯洛伐尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (270, &#x27;nations             &#x27;, &#x27;Solomon Islands | 所罗门群岛&#x27;, 0);INSERT INTO `t_dictionary` VALUES (271, &#x27;nations             &#x27;, &#x27;Somalia | 索马里&#x27;, 0);INSERT INTO `t_dictionary` VALUES (272, &#x27;nations             &#x27;, &#x27;South Africa | 南非&#x27;, 0);INSERT INTO `t_dictionary` VALUES (273, &#x27;nations             &#x27;, &#x27;South Korea | 韩国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (274, &#x27;nations             &#x27;, &#x27;Spain | 西班牙&#x27;, 0);INSERT INTO `t_dictionary` VALUES (275, &#x27;nations             &#x27;, &#x27;Sri Lanka | 斯里兰卡&#x27;, 0);INSERT INTO `t_dictionary` VALUES (276, &#x27;nations             &#x27;, &#x27;Sudan | 苏丹&#x27;, 0);INSERT INTO `t_dictionary` VALUES (277, &#x27;nations             &#x27;, &#x27;Suriname | 苏里南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (278, &#x27;nations             &#x27;, &#x27;Swaziland | 斯维士兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (279, &#x27;nations             &#x27;, &#x27;Sweden | 瑞典&#x27;, 0);INSERT INTO `t_dictionary` VALUES (280, &#x27;nations             &#x27;, &#x27;Switzerland | 瑞士&#x27;, 0);INSERT INTO `t_dictionary` VALUES (281, &#x27;nations             &#x27;, &#x27;Syria | 叙利亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (282, &#x27;nations             &#x27;, &#x27;Taiwan | 台湾&#x27;, 0);INSERT INTO `t_dictionary` VALUES (283, &#x27;nations             &#x27;, &#x27;Tajikistan | 塔吉克斯坦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (284, &#x27;nations             &#x27;, &#x27;Tanzania | 坦桑尼亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (285, &#x27;nations             &#x27;, &#x27;Thailand | 泰国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (286, &#x27;nations             &#x27;, &#x27;Togo | 多哥&#x27;, 0);INSERT INTO `t_dictionary` VALUES (287, &#x27;nations             &#x27;, &#x27;Trinidad and Tobago | 特里尼达和多巴哥&#x27;, 0);INSERT INTO `t_dictionary` VALUES (289, &#x27;nations             &#x27;, &#x27;Tunisia | 突尼斯&#x27;, 0);INSERT INTO `t_dictionary` VALUES (290, &#x27;nations             &#x27;, &#x27;Turkey | 土耳其&#x27;, 0);INSERT INTO `t_dictionary` VALUES (291, &#x27;nations             &#x27;, &#x27;Turkmenistan | 土库曼斯坦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (292, &#x27;nations             &#x27;, &#x27;Tuvalu | 图瓦卢&#x27;, 0);INSERT INTO `t_dictionary` VALUES (293, &#x27;nations             &#x27;, &#x27;Uganda | 乌干达&#x27;, 0);INSERT INTO `t_dictionary` VALUES (294, &#x27;nations             &#x27;, &#x27;Ukraine | 乌克兰&#x27;, 0);INSERT INTO `t_dictionary` VALUES (295, &#x27;nations             &#x27;, &#x27;United Arab Emirates | 阿拉伯联合大公国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (296, &#x27;nations             &#x27;, &#x27;United Kingdom  | 联合王国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (297, &#x27;nations             &#x27;, &#x27;U.S.A. | 美国&#x27;, 0);INSERT INTO `t_dictionary` VALUES (298, &#x27;nations             &#x27;, &#x27;Uruguay | 乌拉圭&#x27;, 0);INSERT INTO `t_dictionary` VALUES (299, &#x27;nations             &#x27;, &#x27;Uzbekistan | 乌兹别克斯坦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (300, &#x27;nations             &#x27;, &#x27;Vanuatu | 瓦努阿图&#x27;, 0);INSERT INTO `t_dictionary` VALUES (301, &#x27;nations             &#x27;, &#x27;Vatican City | 梵蒂冈&#x27;, 0);INSERT INTO `t_dictionary` VALUES (302, &#x27;nations             &#x27;, &#x27;Venezuela | 委内瑞拉&#x27;, 0);INSERT INTO `t_dictionary` VALUES (303, &#x27;nations             &#x27;, &#x27;Vietnam | 越南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (304, &#x27;nations             &#x27;, &#x27;Wales | 威尔士&#x27;, 0);INSERT INTO `t_dictionary` VALUES (305, &#x27;nations             &#x27;, &#x27;Western Samoa | 西萨摩亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (306, &#x27;nations             &#x27;, &#x27;Yemen | 也门&#x27;, 0);INSERT INTO `t_dictionary` VALUES (307, &#x27;nations             &#x27;, &#x27;Yugoslavia | 南斯拉夫&#x27;, 0);INSERT INTO `t_dictionary` VALUES (308, &#x27;nations             &#x27;, &#x27;Zaire | 扎伊尔&#x27;, 0);INSERT INTO `t_dictionary` VALUES (309, &#x27;nations             &#x27;, &#x27;Zambia | 赞比亚&#x27;, 0);INSERT INTO `t_dictionary` VALUES (310, &#x27;nations             &#x27;, &#x27;Zimbabwe | 津巴布韦&#x27;, 0);INSERT INTO `t_dictionary` VALUES (311, &#x27;nations             &#x27;, &#x27;Anhui | 安徽&#x27;, 0);INSERT INTO `t_dictionary` VALUES (312, &#x27;nations             &#x27;, &#x27;Fujian | 福建&#x27;, 0);INSERT INTO `t_dictionary` VALUES (313, &#x27;nations             &#x27;, &#x27;Gansu | 甘肃&#x27;, 0);INSERT INTO `t_dictionary` VALUES (314, &#x27;nations             &#x27;, &#x27;Guangdong | 广东&#x27;, 0);INSERT INTO `t_dictionary` VALUES (315, &#x27;nations             &#x27;, &#x27;Guizhou | 贵州&#x27;, 0);INSERT INTO `t_dictionary` VALUES (316, &#x27;nations             &#x27;, &#x27;Hainan | 海南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (317, &#x27;nations             &#x27;, &#x27;Hebei | 河北&#x27;, 0);INSERT INTO `t_dictionary` VALUES (318, &#x27;nations             &#x27;, &#x27;Heilongjiang | 黑龙江&#x27;, 0);INSERT INTO `t_dictionary` VALUES (319, &#x27;nations             &#x27;, &#x27;Henan | 河南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (320, &#x27;nations             &#x27;, &#x27;Hubei | 湖北&#x27;, 0);INSERT INTO `t_dictionary` VALUES (321, &#x27;nations             &#x27;, &#x27;Hunan | 湖南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (322, &#x27;nations             &#x27;, &#x27;Jiangsu | 江苏&#x27;, 0);INSERT INTO `t_dictionary` VALUES (323, &#x27;nations             &#x27;, &#x27;Jiangxi | 江西&#x27;, 0);INSERT INTO `t_dictionary` VALUES (324, &#x27;nations             &#x27;, &#x27;Jilin | 吉林&#x27;, 0);INSERT INTO `t_dictionary` VALUES (325, &#x27;nations             &#x27;, &#x27;Liaoning | 辽宁&#x27;, 0);INSERT INTO `t_dictionary` VALUES (326, &#x27;nations             &#x27;, &#x27;Qinghai | 青海&#x27;, 0);INSERT INTO `t_dictionary` VALUES (327, &#x27;nations             &#x27;, &#x27;Shaanxi | 陕西&#x27;, 0);INSERT INTO `t_dictionary` VALUES (328, &#x27;nations             &#x27;, &#x27;Shandong | 山东&#x27;, 0);INSERT INTO `t_dictionary` VALUES (329, &#x27;nations             &#x27;, &#x27;Shanxi | 山西&#x27;, 0);INSERT INTO `t_dictionary` VALUES (330, &#x27;nations             &#x27;, &#x27;Sichuan | 四川&#x27;, 0);INSERT INTO `t_dictionary` VALUES (331, &#x27;nations             &#x27;, &#x27;Yunnan | 云南&#x27;, 0);INSERT INTO `t_dictionary` VALUES (332, &#x27;nations             &#x27;, &#x27;Zhejiang | 浙江&#x27;, 0);INSERT INTO `t_dictionary` VALUES (333, &#x27;nations             &#x27;, &#x27;Guangxi | 广西&#x27;, 0);INSERT INTO `t_dictionary` VALUES (334, &#x27;nations             &#x27;, &#x27;Inner Mongolia | 内蒙古&#x27;, 0);INSERT INTO `t_dictionary` VALUES (335, &#x27;nations             &#x27;, &#x27;Ningxia | 宁夏&#x27;, 0);INSERT INTO `t_dictionary` VALUES (336, &#x27;nations             &#x27;, &#x27;Xinjiang | 新疆&#x27;, 0);INSERT INTO `t_dictionary` VALUES (337, &#x27;nations             &#x27;, &#x27;Tibet | 西藏&#x27;, 0);INSERT INTO `t_dictionary` VALUES (338, &#x27;nations             &#x27;, &#x27;Beijing | 北京&#x27;, 0);INSERT INTO `t_dictionary` VALUES (339, &#x27;nations             &#x27;, &#x27;Chongqing | 重庆&#x27;, 0);INSERT INTO `t_dictionary` VALUES (340, &#x27;nations             &#x27;, &#x27;Shanghai | 上海&#x27;, 0);INSERT INTO `t_dictionary` VALUES (341, &#x27;nations             &#x27;, &#x27;Tianjin | 天津&#x27;, 0);INSERT INTO `t_dictionary` VALUES (342, &#x27;nations             &#x27;, &#x27;Hong Kong | 香港&#x27;, 0);INSERT INTO `t_dictionary` VALUES (343, &#x27;nations             &#x27;, &#x27;Macau | 澳门&#x27;, 0);INSERT INTO `t_dictionary` VALUES (346, &#x27;RestaurantTag       &#x27;, &#x27;Wifi|无线上网&#x27;, 0);INSERT INTO `t_dictionary` VALUES (349, &#x27;RestaurantTag       &#x27;, &#x27;Good|View|有景观位&#x27;, 0);INSERT INTO `t_dictionary` VALUES (351, &#x27;RestaurantTag       &#x27;, &#x27;Big|Party|大型宴会&#x27;, 0);INSERT INTO `t_dictionary` VALUES (352, &#x27;RestaurantTag       &#x27;, &#x27;Birthday|Party|生日宴会&#x27;, 0);INSERT INTO `t_dictionary` VALUES (353, &#x27;RestaurantTag       &#x27;, &#x27;BYOB|自带酒水&#x27;, 0);INSERT INTO `t_dictionary` VALUES (354, &#x27;RestaurantStyle     &#x27;, &#x27;朋友聚餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (355, &#x27;RestaurantStyle     &#x27;, &#x27;家庭聚会&#x27;, 0);INSERT INTO `t_dictionary` VALUES (356, &#x27;RestaurantStyle     &#x27;, &#x27;随便吃吃&#x27;, 0);INSERT INTO `t_dictionary` VALUES (357, &#x27;RestaurantStyle     &#x27;, &#x27;休闲小憩&#x27;, 0);INSERT INTO `t_dictionary` VALUES (358, &#x27;RestaurantStyle     &#x27;, &#x27;情侣约会&#x27;, 0);INSERT INTO `t_dictionary` VALUES (359, &#x27;RestaurantStyle     &#x27;, &#x27;商务宴请&#x27;, 0);INSERT INTO `t_dictionary` VALUES (360, &#x27;InviteStatus        &#x27;, &#x27;即将接洽&#x27;, 0);INSERT INTO `t_dictionary` VALUES (361, &#x27;InviteStatus        &#x27;, &#x27;等待老板决定&#x27;, 0);INSERT INTO `t_dictionary` VALUES (362, &#x27;InviteStatus        &#x27;, &#x27;合同签署中&#x27;, 0);INSERT INTO `t_dictionary` VALUES (363, &#x27;InviteStatus        &#x27;, &#x27;合同已经签订&#x27;, 0);INSERT INTO `t_dictionary` VALUES (370, &#x27;Cuisine&#x27;, &#x27;All-You-Can-Eat|自助餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (371, &#x27;Cuisine&#x27;, &#x27;Bar|酒吧&#x27;, 0);INSERT INTO `t_dictionary` VALUES (372, &#x27;Cuisine&#x27;, &#x27;Cafe|咖啡厅&#x27;, 0);INSERT INTO `t_dictionary` VALUES (373, &#x27;Cuisine&#x27;, &#x27;Cantonese|粤菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (374, &#x27;Cuisine&#x27;, &#x27;Dessert|甜品&#x27;, 0);INSERT INTO `t_dictionary` VALUES (375, &#x27;Cuisine&#x27;, &#x27;Global Cuisine|环球美食&#x27;, 0);INSERT INTO `t_dictionary` VALUES (376, &#x27;Cuisine&#x27;, &#x27;Middle Eastern|中东菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (377, &#x27;Cuisine&#x27;, &#x27;Southeast Asian|东南亚菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (378, &#x27;Cuisine&#x27;, &#x27;Zhejiang|浙江菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (379, &#x27;Cuisine&#x27;, &#x27;Fast Casual|小吃快餐&#x27;, 0);INSERT INTO `t_dictionary` VALUES (380, &#x27;nations&#x27;, &#x27;Israel&#x27;, 0);INSERT INTO `t_dictionary` VALUES (381, &#x27;nations&#x27;, &#x27;East Timor&#x27;, 0);INSERT INTO `t_dictionary` VALUES (382, &#x27;nations&#x27;, &#x27;Central African Republic&#x27;, 0);INSERT INTO `t_dictionary` VALUES (383, &#x27;nations&#x27;, &#x27;S?o Tomé and Principe&#x27;, 0);INSERT INTO `t_dictionary` VALUES (384, &#x27;nations&#x27;, &#x27;Ivory Coast&#x27;, 0);INSERT INTO `t_dictionary` VALUES (385, &#x27;nations&#x27;, &#x27;Lesotho&#x27;, 0);INSERT INTO `t_dictionary` VALUES (386, &#x27;nations&#x27;, &#x27;Equatorial Guinea&#x27;, 0);INSERT INTO `t_dictionary` VALUES (387, &#x27;nations&#x27;, &#x27;Guinea Bissau&#x27;, 0);INSERT INTO `t_dictionary` VALUES (400, &#x27;Cuisine&#x27;, &#x27;Sushi|寿司&#x27;, 0);INSERT INTO `t_dictionary` VALUES (401, &#x27;Cuisine&#x27;, &#x27;British|英国菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (402, &#x27;Cuisine&#x27;, &#x27;Dim Sum|早茶点心&#x27;, 0);INSERT INTO `t_dictionary` VALUES (403, &#x27;Cuisine&#x27;, &#x27;Xibei / Xinjiang|西北菜/新疆菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (405, &#x27;Cuisine&#x27;, &#x27;Guizhou|黔菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (406, &#x27;Cuisine&#x27;, &#x27;Pizza|披萨&#x27;, 0);INSERT INTO `t_dictionary` VALUES (408, &#x27;Cuisine&#x27;, &#x27;Seafood|海鲜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (409, &#x27;Cuisine&#x27;, &#x27;Anhui|徽菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (411, &#x27;Cuisine&#x27;, &#x27;Sichuan|川菜&#x27;, 0);INSERT INTO `t_dictionary` VALUES (412, &#x27;Cuisine&#x27;, &#x27;Korean|韩国料理&#x27;, 0);INSERT INTO `t_dictionary` VALUES (413, &#x27;Cuisine&#x27;, &#x27;Juice &amp; Beverages|果汁饮料&#x27;, 0);INSERT INTO `t_dictionary` VALUES (414, &#x27;Cuisine&#x27;, &#x27;Bakery &amp; Pastries|面包烘焙&#x27;, 0);-- ------------------------------ Table structure for t_diners-- ----------------------------DROP TABLE IF EXISTS `t_diners`;CREATE TABLE `t_diners`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;昵称&#x27;,  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,  `avatar_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;,  `roles` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;&#x27; COMMENT &#x27;角色&#x27;,  `is_valid` tinyint(1) NULL DEFAULT NULL,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_diners-- ----------------------------INSERT INTO `t_diners` VALUES (1, &#x27;abc&#x27;, &#x27;昵称st&#x27;, &#x27;13888888888&#x27;, &#x27;abc@imooc.com&#x27;, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, &#x27;/abc&#x27;, &#x27;ROLE_USER&#x27;, 1, &#x27;2020-11-06 16:17:52&#x27;, &#x27;2020-11-06 16:17:55&#x27;);INSERT INTO `t_diners` VALUES (2, &#x27;test&#x27;, &#x27;test&#x27;, &#x27;13666666666&#x27;, NULL, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, &#x27;/test&#x27;, &#x27;ROLE_USER&#x27;, 1, &#x27;2020-11-12 12:01:13&#x27;, &#x27;2020-11-12 12:01:13&#x27;);INSERT INTO `t_diners` VALUES (3, &#x27;test2&#x27;, &#x27;test2&#x27;, &#x27;13666666667&#x27;, NULL, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, &#x27;/test2&#x27;, &#x27;ROLE_USER&#x27;, 1, &#x27;2020-11-12 17:47:12&#x27;, &#x27;2020-11-12 17:47:12&#x27;);INSERT INTO `t_diners` VALUES (5, &#x27;aaa&#x27;, &#x27;aaa&#x27;, &#x27;12311112222&#x27;, NULL, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, &#x27;/aaa&#x27;, &#x27;ROLE_USER&#x27;, 1, &#x27;2020-11-13 12:29:49&#x27;, &#x27;2020-11-13 12:29:49&#x27;);-- ------------------------------ Table structure for t_feed-- ----------------------------DROP TABLE IF EXISTS `t_feed`;CREATE TABLE `t_feed`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;内容&#x27;,  `fk_diner_id` int(11) NULL DEFAULT NULL,  `praise_amount` int(11) NULL DEFAULT NULL COMMENT &#x27;点赞数量&#x27;,  `comment_amount` int(11) NULL DEFAULT NULL COMMENT &#x27;评论数量&#x27;,  `fk_restaurant_id` int(11) NULL DEFAULT NULL,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  `is_valid` tinyint(1) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_feed-- ------------------------------ ------------------------------ Table structure for t_follow-- ----------------------------DROP TABLE IF EXISTS `t_follow`;CREATE TABLE `t_follow`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `diner_id` int(11) NULL DEFAULT NULL,  `follow_diner_id` int(11) NULL DEFAULT NULL,  `is_valid` tinyint(1) NULL DEFAULT NULL,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE,  INDEX `index_followeddiner_valid`(`follow_diner_id`, `is_valid`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_follow-- ------------------------------ ------------------------------ Table structure for t_restaurant-- ----------------------------DROP TABLE IF EXISTS `t_restaurant`;CREATE TABLE `t_restaurant`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `Name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;the En Name of the restaurant&#x27;,  `CnName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `X` double NULL DEFAULT NULL,  `Y` double NULL DEFAULT NULL,  `Location` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;En location of the restaurant&#x27;,  `CnLocation` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `Area` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;city.district.neighbourhood\\r\\nExample: Shanghai.Xuhui.Xujiahui&#x27;,  `CnArea` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `Traffic` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;the information/descripton of the restaurant&#x27;,  `Telephone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;Phone of the restaurant&#x27;,  `Email` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `Website` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `Cuisine` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `AveragePrice` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `AvgLunchPrice` decimal(19, 0) NULL DEFAULT NULL COMMENT &#x27;Average price of lunch&#x27;,  `Introduction` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;Indtroduction of the restaurant&#x27;,  `Status` int(11) NULL DEFAULT 0 COMMENT &#x27;1=Opened 0=Closed&#x27;,  `CreateDT` datetime(0) NULL DEFAULT NULL,  `IsValid` smallint(1) NULL DEFAULT 1 COMMENT &#x27;1=Valid 0=Invalid&#x27;,  `Thumbnail` varchar(120) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;pics at the list, value would be:\\r\\nbasepath/original/picname&#x27;,  `OpenHours` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `LikeVotes` int(10) NULL DEFAULT 0 COMMENT &#x27;the percentage of people like it&#x27;,  `DislikeVotes` int(10) NULL DEFAULT 0 COMMENT &#x27;How many people votes&#x27;,  `Amenities` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;设备&#x27;,  `Tags` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;tags of the restaurant&#x27;,  `OpenDate` datetime(0) NULL DEFAULT NULL,  `closeDate` datetime(0) NULL DEFAULT NULL,  `CityId` int(11) NULL DEFAULT 21 COMMENT &#x27;城市id&#x27;,  PRIMARY KEY (`id`) USING BTREE,  INDEX `index_isvalid`(`IsValid`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 23 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_restaurant-- ----------------------------INSERT INTO `t_restaurant` VALUES (14, &#x27;1931 Pub&#x27;, &#x27;名古&#x27;, 31.2158508275268, 121.461839852847, &#x27;112 Maoming Nan Lu, near Nanchang Lu&#x27;, &#x27;茂名南路112号, 近南昌路&#x27;, &#x27;Xuhui.Fmr French Concession&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 6472 5264&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Shanghainese, Chinese&#x27;, &#x27;¥¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 1, &#x27;&#x27;, &#x27;&#x27;, 1, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (15, &#x27;2001 Hong Kong Teahouse&#x27;, &#x27;2001港式茶餐&#x27;, 31.21385, 121.46051, &#x27;55 Shaanxi Nan Lu, near Changle Lu&#x27;, &#x27;陕西南路55号, 近长乐路&#x27;, &#x27;Xuhui.Fmr French Concession&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 5467 0205&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Dim Sum, Chinese&#x27;, &#x27;¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 4, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (16, &#x27;2nd floor&#x27;, &#x27;2nd floor&#x27;, 31.2162, 121.447998, &#x27;2/F, 810 Changle Lu,near Changshu Lu&#x27;, &#x27;长乐路810号2楼, 近常熟路&#x27;, &#x27;Xuhui.Fmr French Concession&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;13761133471&#x27;, &#x27;&#x27;, &#x27;http://www.2ndfloor.asia&#x27;, &#x27;Cafe&#x27;, &#x27;¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 3, &#x27;&#x27;, &#x27;&#x27;, 1, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (17, &#x27;400 Celsius&#x27;, &#x27;400 Celsius&#x27;, 31.19436, 121.43797, &#x27;1 Hongqiao Lu, 1/F, Grand Gateway, near Caoxi Bei Lu, Metro Line 1 Xujiahui Station&#x27;, &#x27;虹桥路1号港汇广场1楼, 近漕溪北路, 地铁1号线徐家汇站&#x27;, &#x27;Xuhui.Xujiahui&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 6447 0770&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Steakhouse&#x27;, &#x27;¥¥¥¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 3, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (18, &#x27;5 on the Bund&#x27;, &#x27;5 on the Bund&#x27;, 31.234482, 121.490753, &#x27;Five on the Bund,20 Guangdong Lu, near Zhongshan Dong Yi Lu&#x27;, &#x27;广东路20号, 近中山东一路&#x27;, &#x27;Huangpu.The Bund&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Global Cuisine&#x27;, &#x27;¥¥¥¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 3, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (19, &#x27;5 Tables Bistro&#x27;, &#x27;5桌餐厅&#x27;, 31.2174481541175, 121.47318647082, &#x27;210 Danshui Lu, near Zizhong Lu&#x27;, &#x27;淡水路210号, 近自忠路&#x27;, &#x27;Luwan.Xintiandi&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 3304 1205&#x27;, &#x27;&#x27;, &#x27;www.weibo.com/5tables&#x27;, &#x27;European&#x27;, &#x27;¥¥¥¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 4, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (20, &#x27;57 Du Xiang&#x27;, &#x27;57度湘&#x27;, 31.2250117063411, 121.47824432639, &#x27;138 Huaihai Zhong Lu, Infinity Plaza, 4/F, Room 401, near Longmen Lu&#x27;, &#x27;淮海路138号无限度广场4楼401室, 近龙门路&#x27;, &#x27;Xuhui.Huaihai Zhong Lu&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 3315 0057&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Hunan, Chinese&#x27;, &#x27;¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 1, &#x27;restaurant/20/restaurant/T/160_160/1399622680327.JPG&#x27;, &#x27;Daily 11am-9pm&#x27;, 17, 5, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (21, &#x27;609 Pho&#x27;, &#x27;609 Pho&#x27;, 31.237629, 121.438797, &#x27;609 Anyuan Lu, near Jiaozhou Lu&#x27;, &#x27;安源路609号, 近胶州路&#x27;, &#x27;Jing\\&#x27;an&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;18201753996&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Vietnamese&#x27;, &#x27;¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 4, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);INSERT INTO `t_restaurant` VALUES (22, &#x27;70s Restaurant&#x27;, &#x27;70后饭吧&#x27;, 31.2398228737211, 121.438096413353, &#x27;1217 Changde Lu, near Changshou Lu&#x27;, &#x27;常德路1217号, 近长寿路&#x27;, &#x27;Putuo&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;021 6040 2808&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;Chinese&#x27;, &#x27;¥¥&#x27;, 0, &#x27;&#x27;, NULL, &#x27;2014-05-04 19:26:28&#x27;, 1, &#x27;restaurant/22/restaurant/160_160/14075670693130533.JPG&#x27;, &#x27;&#x27;, 7, 2, &#x27;&#x27;, &#x27;&#x27;, &#x27;2016-01-04 11:22:23&#x27;, &#x27;2016-01-04 11:22:23&#x27;, 21);-- ------------------------------ Table structure for t_seckill_vouchers-- ----------------------------DROP TABLE IF EXISTS `t_seckill_vouchers`;CREATE TABLE `t_seckill_vouchers`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `fk_voucher_id` int(11) NULL DEFAULT NULL,  `amount` int(11) NULL DEFAULT NULL,  `start_time` datetime(0) NULL DEFAULT NULL,  `end_time` datetime(0) NULL DEFAULT NULL,  `is_valid` int(11) NULL DEFAULT NULL,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_seckill_vouchers-- ------------------------------ ------------------------------ Table structure for t_voucher-- ----------------------------DROP TABLE IF EXISTS `t_voucher`;CREATE TABLE `t_voucher`  (  `id` int(10) NOT NULL AUTO_INCREMENT,  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;代金券标题&#x27;,  `thumbnail` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;缩略图&#x27;,  `amount` int(11) NULL DEFAULT NULL COMMENT &#x27;抵扣金额&#x27;,  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT &#x27;售价&#x27;,  `status` int(10) NULL DEFAULT NULL COMMENT &#x27;-1=过期 0=下架 1=上架&#x27;,  `expire_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;过期时间&#x27;,  `redeem_restaurant_id` int(10) NULL DEFAULT NULL COMMENT &#x27;验证餐厅&#x27;,  `stock` int(11) NULL DEFAULT 0 COMMENT &#x27;库存&#x27;,  `stock_left` int(11) NULL DEFAULT 0 COMMENT &#x27;剩余数量&#x27;,  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;描述信息&#x27;,  `clause` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;使用条款&#x27;,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  `is_valid` tinyint(1) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_voucher-- ------------------------------ ------------------------------ Table structure for t_voucher_order-- ----------------------------DROP TABLE IF EXISTS `t_voucher_order`;CREATE TABLE `t_voucher_order`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `order_no` int(11) NULL DEFAULT NULL,  `fk_voucher_id` int(11) NULL DEFAULT NULL,  `fk_diner_id` int(11) NULL DEFAULT NULL,  `qrcode` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;图片地址&#x27;,  `payment` tinyint(4) NULL DEFAULT NULL COMMENT &#x27;0=微信支付 1=支付宝支付&#x27;,  `status` tinyint(1) NULL DEFAULT NULL COMMENT &#x27;订单状态：-1=已取消 0=未支付 1=已支付 2=已消费 3=已过期&#x27;,  `fk_seckill_id` int(11) NULL DEFAULT NULL COMMENT &#x27;如果是抢购订单时，抢购订单的id&#x27;,  `order_type` int(11) NULL DEFAULT NULL COMMENT &#x27;订单类型：0=正常订单 1=抢购订单&#x27;,  `create_date` datetime(0) NULL DEFAULT NULL,  `update_date` datetime(0) NULL DEFAULT NULL,  `is_valid` int(11) NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;-- ------------------------------ Records of t_voucher_order-- ----------------------------SET FOREIGN_KEY_CHECKS = 1;\n\n\n\n\n\n项目架构与微服务搭建\n基于Spring Cloud Hoxton.SR8搭建**\n第一步：创建Maven的父级工程，添加对应依赖\n\n&lt;!-- 可以集中定义依赖资源的版本信息 --&gt;   &lt;properties&gt;       &lt;spring-boot-version&gt;2.3.5.RELEASE&lt;/spring-boot-version&gt;       &lt;spring-cloud-version&gt;Hoxton.SR8&lt;/spring-cloud-version&gt;       &lt;lombok-version&gt;1.18.16&lt;/lombok-version&gt;       &lt;commons-lang-version&gt;3.11&lt;/commons-lang-version&gt;       &lt;mybatis-starter-version&gt;2.1.3&lt;/mybatis-starter-version&gt;       &lt;mysql-version&gt;8.0.22&lt;/mysql-version&gt;       &lt;swagger-starter-version&gt;2.1.5-RELEASE&lt;/swagger-starter-version&gt;       &lt;hutool-version&gt;5.4.7&lt;/hutool-version&gt;       &lt;guava-version&gt;20.0&lt;/guava-version&gt;       &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;       &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;       &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;   &lt;/properties&gt;   &lt;!-- 集中定义依赖，不引入 --&gt;   &lt;dependencyManagement&gt;       &lt;dependencies&gt;           &lt;!-- spring boot 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;               &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;               &lt;version&gt;$&#123;spring-boot-version&#125;&lt;/version&gt;               &lt;type&gt;pom&lt;/type&gt;               &lt;scope&gt;import&lt;/scope&gt;           &lt;/dependency&gt;           &lt;!-- spring cloud 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;               &lt;version&gt;$&#123;spring-cloud-version&#125;&lt;/version&gt;               &lt;type&gt;pom&lt;/type&gt;               &lt;scope&gt;import&lt;/scope&gt;           &lt;/dependency&gt;           &lt;!-- lombok 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;               &lt;artifactId&gt;lombok&lt;/artifactId&gt;               &lt;version&gt;$&#123;lombok-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- common-lang3 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;               &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;               &lt;version&gt;$&#123;commons-lang-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- mybatis 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;               &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;               &lt;version&gt;$&#123;mybatis-starter-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- swagger 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;com.battcn&lt;/groupId&gt;               &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;               &lt;version&gt;$&#123;swagger-starter-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- mysql 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;mysql&lt;/groupId&gt;               &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;               &lt;version&gt;$&#123;mysql-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- hutool 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;cn.hutool&lt;/groupId&gt;               &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;               &lt;version&gt;$&#123;hutool-version&#125;&lt;/version&gt;           &lt;/dependency&gt;           &lt;!-- guava 依赖 --&gt;           &lt;dependency&gt;               &lt;groupId&gt;com.google.guava&lt;/groupId&gt;               &lt;artifactId&gt;guava&lt;/artifactId&gt;               &lt;version&gt;$&#123;guava-version&#125;&lt;/version&gt;           &lt;/dependency&gt;       &lt;/dependencies&gt;   &lt;/dependencyManagement&gt;   &lt;!-- 集中定义项目所需插件 --&gt;   &lt;build&gt;       &lt;pluginManagement&gt;           &lt;plugins&gt;               &lt;!-- spring boot maven 项目打包插件 --&gt;               &lt;plugin&gt;                   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;               &lt;/plugin&gt;           &lt;/plugins&gt;       &lt;/pluginManagement&gt;   &lt;/build&gt;\n\n\n第二步：创建基于Eureka的注册中心微服务\n第三步：配置注册中心(单机版)\n\nserver:  port: 8080spring:  application:    name: ms-registry# 配置 Eureka Server 注册中心eureka:  client:    register-with-eureka: false    fetch-registry: false    service-url:      defaultZone: http://localhost:8080/eureka/logging:  pattern:    console: &#x27;%d&#123;HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&#x27;\n\n\n第四步：启动注册中心并验证\n第五步：添加网关微服务，并注册到注册中心，启动并测试\n第六步：添加用户微服务，并注册到注册中心，启动并测试\n\n\n同理创建其他微服务\n\n","categories":["DataBase","Redis"],"tags":["DataBase","Redis","cache"]}]